{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"UMI3D SDK Documentation","text":"<p> Download last SDK release  View on GitHub</p>"},{"location":"#umi3d-unified-model-for-interactions-in-3d","title":"UMI3D : Unified Model for Interactions in 3D","text":"<p>UMI3D is a web protocol that enables the creation of 3D media in which users of any AR/VR device can collaborate in real time. The 3D media is created once and hosted on a server or on a local computer. Any XR device can display and interact with it remotely thanks to a dedicated UMI3D browser.</p> <p></p> <p>Creating experiences with UMI3D helps to reduce the number of experiences that should be developed to treat the same use case with different devices. Moreover, it enables different devices to interact within a same experience without any further development.</p> <p></p>"},{"location":"#principles","title":"Principles","text":"<p>UMI3D relies on an interaction-based device abstraction layer. It allows remote 3D media created with the UMI3D SDK to describe its possible interactions with a finite and limited set of objects.</p> <p></p> <p>Each UMI3D browser supervises the loading/synchronization of 3D content, as well as the dynamic generation of an adapted to the device user interface, allowing its user to perform the described interactions. The main difference with existing cross-platform development standards such as WebVR or OpenXR is UMI3D's interaction-based device abstraction layer. These standards are limiting the designer to the usage of devices' common features. UMI3D enables to use all of the device's features to perform the interaction received.</p>"},{"location":"pages/about/license/","title":"UMI3D SDK License","text":""},{"location":"pages/about/license/#sdk-license","title":"SDK License","text":"<pre><code>   Apache License\n   Version 2.0, January 2004\n   http://www.apache.org/licenses/\n\n   **TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION**\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   **END OF TERMS AND CONDITIONS**\n\n   Copyright 2018-2023 Gfi Informatique Inetum\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at \n\n   http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n</code></pre>"},{"location":"pages/about/license/#attributions","title":"Attributions","text":"<p>Some used on this website are open source icons created by Freepik or Smashicons from Flaticon.</p>"},{"location":"pages/api-reference/","title":"Reference","text":"<p>This section contains precise details on technical implementations.</p> <p>This part of the documentation is still under construction.</p> <p>More API descriptions to come soon.</p>"},{"location":"pages/api-reference/#generated-api-reference","title":"Generated API Reference","text":"<p>Automatically generated documentation from code details all classes, methods and fields in the SDK.</p> <p> Access API reference</p>"},{"location":"pages/api-reference/#modules","title":"Modules","text":"<p>UMI3D is composed of four modules:</p> <ol> <li>Core</li> <li>InteractionSystem</li> <li>UserCapture</li> <li>Collaboration</li> </ol> <p></p>"},{"location":"pages/api-reference/#packages","title":"Packages","text":"<p>The SDK is exported in three packages:</p> <ul> <li>Common - Contains all the UMI3D network standardization</li> <li>EDK - Contains all classes for UMI3D environment design and hosting on a server</li> <li>CDK - Contains all classes for UMI3D environments access through a browser</li> </ul> <p>To develop an environment you'll need Common+EDK, to develop a browser you need Common+CDK.</p>"},{"location":"pages/api-reference/collaboration/relays/","title":"Relays","text":""},{"location":"pages/api-reference/collaboration/relays/#relay-description","title":"Relay description","text":"<p>A UMI3D Relay Description is a Scriptable Object allowing to describe custom rules governing the operation of the relay. Each description describes one rule for messages intended for inside its own Volume, and another for those intended for outside the Volume.</p> <p></p> <p>A rule first specifies if the relay should transmit data or ignore it.</p> <p>If the relay has to send data, the definition of the sending strategy is required.</p> <p>Three sending strategies are currently available:</p> <ul> <li>Always Send -&gt; Each data may be always transmitted.</li> <li>Fixed -&gt; Data may be transmitted regularly, at a defined frequency. The information that will be requested during a cooldown will be dropped.</li> <li>Proximity -&gt; Data may be transmitted according to the distance between the transmitter and the receiver. This strategy requires the definition of the frequency and the spatial bounds. The information that will be requested during a cooldown will be dropped.</li> </ul>"},{"location":"pages/api-reference/collaboration/relays/#volumes","title":"Volumes","text":"<p>Volumes are defined by the usage of the component called \"Relay Volume\". It is then possible to specify for a data channel the Relay description to employ. </p> <p></p> <p>Moreover, two properties have been added to the <code>UMI3DAbstractNode</code>. They are useful to know if a node is present in the same Volume as a connected user. In some cases, a node can be spatially present within a Volume, but use the relay of another Volume that has no spatial existence.</p> <p></p> <p>These fields must be specified by environment scripts, and can be modified at any time.</p>"},{"location":"pages/api-reference/collaboration/relays/#requests-for-relaying-data","title":"Requests for relaying data","text":"<p>In order to request the sending of data on a specific data channel, the script RelayVolume makes available four methods, one per channel. A static dictionary is accessible to find a RelayVolume from an ID.</p> <pre><code>sender -&gt; The node associated to the request.\ndata -&gt; The data to send.\ntarget -&gt; A specific UMI3DUser, which is not necessarily the receiver of the data.\nreceiverSetting -&gt; The setting used to determine the data receiver.\n    All -&gt; Every existing users.\n    Others -&gt; Every existing users, except the user specified in target.\n    Target -&gt; The user specified in target only.\nisReliable -&gt; Determine if the network sending is reliable.\n</code></pre>"},{"location":"pages/api-reference/core/environment-description/","title":"Environment description","text":""},{"location":"pages/api-reference/core/environment-description/#gltf-base","title":"glTF base","text":"<p>The environment description used in UMI3D relies on the glTF open standard for three-dimmensional scenes and models desscription, from the Khronos Group. The glTF standard represent an environment as a tree of nodes, that may possess differents properties (better known as components). The glTF standard admits extensions to properties, to extend their abilities. A such, each UMI3D component is an extension of a glTF property.</p>"},{"location":"pages/api-reference/core/environment-description/#environment","title":"Environment","text":"<p>An Environment is the root of the scene graph. It also comprise other essential information such as its name.</p>"},{"location":"pages/api-reference/core/environment-description/#scene","title":"Scene","text":"<p>An Environment can possess several scene that could be displayed at one. From and including the scene, each child node has its own transform component (a position and a rotation)</p>"},{"location":"pages/api-reference/core/environment-description/#3d-assets","title":"3D Assets","text":"<p>UMI3D provides extensions for a lot of usual 3D assets that are node components (Models, Meshes, Lights, Canvas...).</p> <ul> <li>3D Rendered<ul> <li>Line</li> <li>Mesh</li> <li>Model</li> <li>Submodel</li> </ul> </li> <li>UI<ul> <li>Canvas</li> <li>Rect</li> <li>Text</li> <li>Image</li> </ul> </li> <li>Other<ul> <li>Light</li> </ul> </li> </ul>"},{"location":"pages/api-reference/core/environment-description/#material","title":"Material","text":"<p>Materials could be added to the environment to be used by other assets.</p> <p>Suported Materials are</p> <ul> <li>PBR materials</li> <li>External materials</li> </ul>"},{"location":"pages/api-reference/core/environment-description/#animations","title":"Animations","text":"<p>An animation is the description of any playable sequence of a media. Node animation thus moves nodes while video and audio animation based on specific ressources can also be played.</p> <p>Supported animation are</p> <ul> <li>Video</li> <li>Audio</li> <li>3D movement animation</li> <li>Animation through animators</li> </ul>"},{"location":"pages/api-reference/core/environment-description/#shaders","title":"Shaders","text":"<p>Shaders with custom properties are supported.</p>"},{"location":"pages/api-reference/core/environment-description/#post-processing-effects","title":"Post-Processing effects","text":"<p>Post-Processing effects are packaged with the environment to tell the browser to execute them if possible.</p> <p>Currently supported post-processing effects are</p> <ul> <li>Deferred fog</li> <li>Global bloom</li> <li>Global vignette</li> </ul>"},{"location":"pages/api-reference/core/environment-synchronization/","title":"Environment synchronization","text":"<p>After a enviroment has been loaded on a browser, changes can happen to objects in the remotely hosted enviroment (e.g. a moving ball, or color change on a wall). It is necessary to maintain a coherence between the environment description on the server and the one on the browsers.</p>"},{"location":"pages/api-reference/core/environment-synchronization/#entities","title":"Entities","text":"<p>Any object that belongs to an environment and is concerned by the environment synchronization is a <code>UMI3DEntity</code>. This includes all objects on the scene graph but all entities are not necessarily a part of the scene description. A <code>UMI3DEntity</code> possesses a unique ID that s attributed by the server on runtime and one or several <code>EntityProperty</code>.</p>"},{"location":"pages/api-reference/core/environment-synchronization/#transactions","title":"Transactions","text":"<p>A <code>Transaction</code> is the wrapper around one ore several <code>Operations</code> and is the message sent from the server to the clients to inform the connected browsers of a change. A transaction could be either reliable or not. Reliable transactions are guarranted to be received by clients, at the cost of a longer message and processing, while unreliable transactions do not have this verification step, making them lighter and faster.</p>"},{"location":"pages/api-reference/core/environment-synchronization/#environment-synchronization_1","title":"Environment Synchronization","text":""},{"location":"pages/api-reference/core/environment-synchronization/#operations","title":"Operations","text":"<p>An <code>Operation</code> is a unit change to a UMI3D <code>Entity</code>. It could either be its loading and destroying, or ore often the setting of one of its asynchroneous properties. Each type of <code>EntityProperty</code> is identified in UMI3D through a unique ID. See the Networking section for more information.</p> <p>Syntax for a new transaction:</p> <pre><code>Operation operation = new SetEntityListProperty()\n{\nusers = new HashSet&lt;UMI3DUser&gt;(UMI3DServer.Instance.Users()),\nentityId = entityId,\nproperty = propertyId,\nvalue = aValue\n};\nTransaction transaction = new Transaction() { reliable = true; };\ntransaction.Add(operation );\ntransaction.Dispatch();\n</code></pre>"},{"location":"pages/api-reference/core/environment-synchronization/#asynchroneous-properties","title":"Asynchroneous Properties","text":"<p>Asynchroneous properties (<code>AsyncProperties</code>) are properties of UMI3D entities that are allowed to be set and to be different from one user to another, resulting in two different values in two different browsers.</p> <p>Their value is set through a <code>SetValue()</code> call on the AsyncProperty wrapper. It returns a <code>Transaction</code> ready to be dispatched.</p>"},{"location":"pages/api-reference/core/navmesh/","title":"Navigation Mesh","text":"<p>Navigation is possible on a navigation mesh (NavMesh), this mesh is generated on browsers based on the meshes or submodels that have been marked as isPartOfNavMesh in the environment. A model can also be marked as traversable not to modify the structure of the underlying NavMesh.</p> <p></p>"},{"location":"pages/api-reference/core/navmesh/#requests","title":"Requests","text":""},{"location":"pages/api-reference/core/navmesh/#navigation-request","title":"Navigation Request","text":"<p> An environment may request for a user to navigate to a point of the environment.</p>"},{"location":"pages/api-reference/core/navmesh/#teleportation-request","title":"Teleportation Request","text":"<p> An environment may teleports its user to another point of the environment with a rotation to apply.</p>"},{"location":"pages/api-reference/core/navmesh/#vehicle-request","title":"Vehicle Request","text":"<p>An environment may board a user in a vehicle.</p>"},{"location":"pages/api-reference/interaction-system/tools/","title":"Tools","text":""},{"location":"pages/api-reference/interaction-system/tools/#tool","title":"Tool","text":"<p>A Tool is an Entity that contains interactions.</p>"},{"location":"pages/api-reference/interaction-system/tools/#interactable","title":"Interactable","text":"<p>An Interactable is a Tool that is related to a game object in the environment.</p>"},{"location":"pages/api-reference/interaction-system/tools/#toolbox","title":"Toolbox","text":"<p>A Toolbox is a Tool that contains a set of interactions from several tools.</p>"},{"location":"pages/api-reference/user-capture/bindings/","title":"Bindings","text":"<p>Bindings are part of the system set up in order to efficiently link objects to users. This system is based on the skeleton present in the browser used. It is possible to declare links between the objects and the parts of the skeleton, in order to let the browser manage the movement of the linked objects, and therefore to save on server update. The bindings of other users known by the browser are also animated locally, thanks to the tracking information transmitted between the browsers.</p> <pre><code>UMI3DBinding binding = new UMI3DBinding()\n{\nboneType = bone.boneType,\nnode = obj.GetComponent&lt;UMI3DAbstractNode&gt;(),\nrigName = rig.rigname,\nisBinded = true,\noffsetPosition = new Vector3(1, 1, 0),\noffsetRotation = Quaternion.FromEulers(90, 0, 0)\n}\n</code></pre> <p>The offsets are both set in the local frame of the bone. The boolean <code>isBinded</code> sets the binding activation. Several bindings with the same object can cohabit if only one of them is active. In case of binding an object's rig, specifying the rigName property field is needed. In case of this field remaining empty, the Binding will be created for the entire object.</p>"},{"location":"pages/api-reference/user-capture/bindings/#adding-a-binding","title":"Adding a binding","text":"<p>The method <code>AddBinding</code> of the <code>UMI3DEmbodimentManager</code> class returns a new <code>SetEntityProperty</code> with the operation of adding a binding to a <code>UMI3DAvatarNode</code> object.</p>"},{"location":"pages/api-reference/user-capture/bindings/#updating-a-binding","title":"Updating a binding","text":"<p>Each binding can be partially or totally updated. It is possible to create of copy of the existing bindings and to modify the concerns fields. Then, the method \"UpdateBinding\" of the <code>UMI3DEmbodimentManager</code> class will return a new <code>SetEntityProperty</code>. It contains the operation of updating a binding at a certain index of the list of bindings of a <code>UMI3DAvatarNode</code> object.</p> <p>For example, in order to make a binding inactive, it only requires to copy the binding to update and to change the boolean field <code>isBinded</code> to False.</p>"},{"location":"pages/api-reference/user-capture/bindings/#removing-a-binding","title":"Removing a binding","text":"<p>Deleting a binding removes the link between the object concerned and the user's skeleton. The method <code>RemoveBinding</code> requires the binding to delete or its index in the list of bindings of the concerned UMI3DAvatarNode object. In addition, it is possible to fix the position of the object in space at the time of deletion. For that, the method <code>RemoveBinding</code> accepts two optionnal parameters : a boolean, to specify the fixing in space, and an <code>UMI3DAbstractNode</code> object, which is the relative node to which the debinded object will be placed. The method returns a list of <code>SetEntityProperty</code> with the dedicated operations.</p>"},{"location":"pages/api-reference/user-capture/bindings/#disable-all-bindings","title":"Disable all bindings","text":"<p>It is possible to disable the bindings of a UMI3DAvatarNode object by using the method <code>UpdateBindingActivation</code> and specifying the activation boolean. After having disabled the activation by this means, it will be necessary to reuse this method to reactivate them.</p>"},{"location":"pages/api-reference/user-capture/bindings/#updating-the-list-of-bindings","title":"Updating the list of bindings","text":"<p>The method <code>UpdateBindingList</code> is used to replace all the existing bindings by a new set.</p> <p>Each described feature could be use for synchrone and asynchrone users. It is advised to synchronize on the server the movement of binded objects according to the position of the users.</p>"},{"location":"pages/explanation/","title":"Discussions","text":"<p>This section contains different explanations on the concepts behind UMI3D at a fairly high level.</p> <p>This part of the documentation is still under construction.</p> <p>More dicussions to come soon.</p>"},{"location":"pages/explanation/interactions-design/","title":"Interaction design","text":"<p>The environment and its available interactions are designed on the server-side. Some of them are independant from available objects and are thus abstract Global Tools (such as answering to a short form), while the other are attached to objects through Interactables (such as pressing a button). Both are presented to clients through the UMI3D network protocol.</p> <p></p>"},{"location":"pages/explanation/interactions-design/#global-interactions","title":"Global interactions","text":"<p>Global interactions are interactions that do not rely on an object. For example, answering to a form.</p> <p></p>"},{"location":"pages/explanation/interactions-design/#object-focused-interactions-interactables","title":"Object-focused interactions\u200b (Interactables)","text":"<p>Object-focused interactions are interactions that are related to an object, such as changing its colour. This interactions are grouped into a single specialized tool, called Interactable.</p> <p></p>"},{"location":"pages/explanation/interactions-design/#interaction-transfer","title":"Interaction transfer","text":"<p>UMI3D Interactions are tools that are related to Events (e.g. trigger, hold) or parameters to set (e.g. a boolean, a float etc..). When a tool is associated to an UMI3D object, it is called an Ineractable. Tools are sent to browsers through the network protocol using UMI3D serialization conventions. When loaded on browsers, Interactable are wrapped up into an InteractableContainer on the scene graph (it has a transform).</p> <p></p>"},{"location":"pages/explanation/interactions-feedbacks/","title":"Interaction feedbacks","text":""},{"location":"pages/explanation/interactions-feedbacks/#pre-interaction-feedback","title":"Pre-interaction feedback","text":"<p>While hovering <code>Interactable</code> entities, hover feedback is sent back to the server if the <code>notifyOnHover</code> parameter is On.</p>"},{"location":"pages/explanation/interactions-feedbacks/#post-interaction-feedback","title":"Post-interaction feedback","text":"<p>While an interaction is performed, interactions Requests are sent to the environment for triggering feedbacks as reactions and possibly change the available interactions. This behaviors could be totally customized thorugh the right UMI3D events, parameters and custom scripts during the environment design.</p> <ul> <li>Open link</li> <li>Manipulation</li> <li>Callback on notifications</li> <li>Tools projection lifecycle management</li> <li>Event trigger</li> <li>State change</li> <li>Parameter setting</li> <li>Upload file</li> </ul>"},{"location":"pages/explanation/interactions-mapping/","title":"Interaction mapping","text":"<p>On the client-side, browsers receive the available interactions and make them available for users.</p> <p></p>"},{"location":"pages/explanation/interactions-mapping/#projection","title":"Projection","text":"<p>When the user decides to access an interaction tool through selection (e.g. by pointing an object), the <code>InteractionMapper</code> looks for available input channels on the used controller and map the interaction\u00a0to them, enabling the user to maniuplate through the controller's inputs. E.g. by looking at a door handle, the interaction \"open the door\" is projected on the user controller trigger button that when pressed will open the door.</p> <p>The server can also request from a browser to force the projection of a tool.</p> <p></p>"},{"location":"pages/explanation/interactions-mapping/#displayers","title":"Displayers","text":"<p>Sometimes, an interaction requires specific inputs that cannot be offered physically by a device. (e.g. setting up a float) If such a specific user interface is required, a menu is created as a displayer to enable the user to interact with the parameter setting.</p> <p>More details in the specific section.</p> <p></p>"},{"location":"pages/explanation/interactions/","title":"Interaction model","text":"<p>The Interaction System enables user to interact with the 3D environment, enabling user changes in the environment.</p>"},{"location":"pages/explanation/interactions/#model","title":"Model","text":"<p>The UMI3D interaction model  is divided into 5 key steps:</p> <ol> <li>Declaration: The actions a user can process are declared dynamically in the environment.     Those atomic interactions are called interactions blocks and are grouped within tools.     They are then sent to browsers.</li> <li>Selection: When a tool is selected by a user, the tool is projected on the controller.     This means that the interactions are then available with the adequate inputs on the controller.     If a specific user interface is required, it is generated by the browser to handle the interaction.</li> <li>Interaction: When interactions are performed with projected tools, browsers send different Interaction Requests to notify the environment about the current user's actions.</li> <li>Reaction: Receiving the request announcing the activation of an interaction block, the environment triggers feedbacks as a reaction.     This enables the alteration of the environment through a Manipulation, the set up of a Parameter, the answer to a Form, or the triggering of an Event.</li> <li>Retroaction: Finally, the reaction may change the available interactions for the users.</li> </ol> <p>The complete list of supported Parameters and Interaction Requests can be found in the API reference.</p> <p></p>"},{"location":"pages/explanation/interactions/#references","title":"References","text":"<p>This model is based on the thesis that was the first step towards UMI3D:</p> <ul> <li>Julien Casarin, Dominique Bechmann, and Marilyn Keller. 2017. A unified model for interaction in 3D environment. In Proceedings of the 23rd ACM Symposium on Virtual Reality Software and Technology (VRST '17). Association for Computing Machinery, New York, NY, USA, Article 23, 1\u20137. https://doi.org/10.1145/3139131.3139140</li> <li>Julien Casarin, Nicolas Pacqueriaud, and Dominique Bechmann. 2018. UMI3D: A Unity3D Toolbox to Support CSCW Systems Properties in Generic 3D User Interfaces. Proc. ACM Hum.-Comput. Interact. 2, CSCW, Article 29 (November 2018), 20 pages. https://doi.org/10.1145/3274298</li> </ul>"},{"location":"pages/explanation/properties-interpolation/","title":"Interpolation","text":"<p>To have a smoothing effect when changing an object properties it is possible to ask for browsers to interpolate the properties values. First, a <code>StartInterpolation</code> Operation should be sent. And when the environment decide to stop the smoothing effect, a <code>StopInterpolation</code> Operation should be sent.</p> <p></p> <p>It also greatly diminishes the pressure on the bandwitdh.</p> <p></p>"},{"location":"pages/explanation/scene-description/","title":"Environment model","text":""},{"location":"pages/explanation/scene-description/#scene-synchronization","title":"Scene synchronization","text":"<p>The scene synchronization module is the core of UMI3D. UMI3D Scene Synchronization model is based on two standardized data models enabling the loading and synchronization of a remote 3D environment composed of assets in multiple formats and/or levels of detail. The scene description data model is an extension of glTF 2.0 following its standard format for extensions. The synchronization model is a standardized transactional communication protocol enabling the virtual environment to broadcast its changes to all the connected devices.</p> <p>Using UMI3D to communicate with XR devices, remote virtual environments, also known as virtual worlds, are providing a web API enabling these devices to download the 3D scene composing the world in its current state. The object returned in the bson format follows glTF 2.0 data structure, if the scene is not directly provided as a .glb or .gltf file. glTF 2.0 is an ISO international standard created by the Khronos group focused on the transmission and loading of 3D assets and scenes. UMI3D scene description is based on extensions of glTF 2.0 using the Extension Mechanism documented on Khronos GitHub.</p>"},{"location":"pages/explanation/scene-description/#gltf-base","title":"glTF base","text":"<p>The environment description used in UMI3D relies on the glTF open standard for three-dimmensional scenes and models desscription, from the Khronos Group. The glTF standard represent an environment as a tree of nodes, that may possess differents properties (better known as components). The glTF standard admits extensions to properties, to extend their abilities. A such, each UMI3D component is an extension of a glTF property.</p> <p></p>"},{"location":"pages/explanation/tracking/","title":"Body tracking","text":"<p>Partly imported from the powerpoint \"Umi3d_2.0\". Last updated on 07/12/21.</p>"},{"location":"pages/explanation/tracking/#user-tracking-frames","title":"User Tracking Frames","text":"<p>Each browser send tracking data as User Tracking Frames. Each frames contains the position and rotation of the anchor of the skeleton and the relative position, rotation and scale of each bone.</p>"},{"location":"pages/explanation/tracking/#tracking-extrapolation","title":"Tracking Extrapolation","text":"<p>Based on the received tracking frames, movement is reconstructed using extrapolators. The use of extrapolator is caused by the heavyness of user Tracking Frames that cannot be sent at every frames. This reconstrcution ensures a smooth movement as well as a relatively manageable amount of data to send to browsers.</p> <p></p> <p>This reconstruction is done using simple linear extrapolators, but plans are on the way to make better extrapolations.</p>"},{"location":"pages/how-to/","title":"How-to guides","text":"<p>This sections contains a number of small guides that can be thought as recipes in order to quickly achieve a specific goal.</p> <p>This part of the documentation is still under construction.</p> <p>More guides to come soon.</p> <ul> <li>Asset management<ul> <li>Add a 3D Model to a scene</li> <li>Change an asset property at runtime</li> <li>Override the material's color of an asset</li> <li>Group assets in an asset library</li> </ul> </li> <li>Interactions<ul> <li>Create a button</li> </ul> </li> </ul>"},{"location":"pages/how-to/add-a-3d-model/","title":"Add a 3D model","text":"<p>To make youre environment rich and intersting, you will surely need some 3D models. Here is a short guide to add one to your environment and place it as you want.</p>"},{"location":"pages/how-to/add-a-3d-model/#store-your-3d-asset","title":"Store your 3D asset","text":""},{"location":"pages/how-to/add-a-3d-model/#1-define-a-place-of-stage","title":"1. Define a place of stage","text":"<p>Find the \"/data\" folder at the root of your project.</p> <p></p> <p>You should create the folder if you do not have it.</p>"},{"location":"pages/how-to/add-a-3d-model/#2-define-the-storage-access-level","title":"2. Define the storage access level","text":"<p>Choose whether your file should be publicly available or not by choosing the corresponding folder.</p> <p></p> <p>You should create the folders if you do not have them.</p>"},{"location":"pages/how-to/add-a-3d-model/#3-import-your-asset","title":"3. Import your asset","text":"<p>Add your 3D assets to any subfolder of your choice.</p> <p></p>"},{"location":"pages/how-to/add-a-3d-model/#reference-it-in-the-scene","title":"Reference it in the scene","text":""},{"location":"pages/how-to/add-a-3d-model/#1-add-a-new-gameobject","title":"1. Add a new gameobject","text":"<p>Open your environment. Under your <code>UMI3D Scene</code> node, add an empty object.</p> <p></p>"},{"location":"pages/how-to/add-a-3d-model/#2-add-a-model-component","title":"2. Add a Model component","text":"<p>Add a <code>UMI3D Model</code> component to that node.</p> <p>Note</p> <p>Make sure the node with <code>UMI3D Model</code> component has all its parents up to the node with the <code>UMI3D Scene</code> component having <code>UMI3D Node</code> components.</p> <p></p>"},{"location":"pages/how-to/add-a-3d-model/#3-set-up-variants","title":"3. Set up variants","text":"<p>Unwrap the variants parameters and set the size value to 1 to add a variant</p> <p></p>"},{"location":"pages/how-to/add-a-3d-model/#4-set-up-format","title":"4. Set up format","text":"<p>Set up the format to the one of the model to link, check the Is a local file checkbox, and browse in your file explorer towards the desired 3D model.</p> <p></p>"},{"location":"pages/how-to/add-a-3d-model/#modify-its-position-orientation-or-size","title":"Modify its position, orientation or size","text":""},{"location":"pages/how-to/add-a-3d-model/#1-display-a-local-copy","title":"1. Display a local copy","text":"<p>Add an import of the model through Unity to see your model in the editor.</p> <p></p> <p></p>"},{"location":"pages/how-to/add-a-3d-model/#2-apply-any-transformation","title":"2. Apply any transformation","text":"<p>Modify the Transform component on the node that has the <code>UMI3D Model</code> component attached. Here, the scale is reduced to (0.25, 0.25, 0,25).</p> <p></p> <p></p>"},{"location":"pages/how-to/add-an-avatar-to-a-user/","title":"Add an avatar to a user","text":""},{"location":"pages/how-to/add-an-avatar-to-a-user/#set-up-an-avatar-model","title":"Set up an avatar model","text":""},{"location":"pages/how-to/add-an-avatar-to-a-user/#bind-your-avatar-model-to-the-users-skeleton","title":"Bind your avatar model to the user's skeleton","text":""},{"location":"pages/how-to/change-color-asset/","title":"Override the color of an asset","text":"<p>You can change the color of an asset by overriding its materials by script using UMI3D transactions. Here is a way to achieve this.</p>"},{"location":"pages/how-to/change-color-asset/#define-a-new-material","title":"Define a new Material","text":"<p>Create a Material Scriptable Object.</p> <p></p> <p>Such as a Umi3D_External_Material or a Umi3D_PBR_Material.</p> <p></p>"},{"location":"pages/how-to/change-color-asset/#change-color-by-script","title":"Change color by script","text":"<p>Create a script referencing the object and the material.</p> <p></p> <pre><code>using umi3d.edk;\nusing UnityEngine;\npublic class ChangeBalloonColor : MonoBehaviour\n{\nUMI3DModel balloonModel;\npublic MaterialSO newMaterial;\npublic void Start()\n{\nballoonModel = GetComponent&lt;UMI3DModel&gt;();\n}\n}\n</code></pre>"},{"location":"pages/how-to/change-color-asset/#override-the-material","title":"Override the material","text":"<p>Override the material by setting a new Material overrider to the object.</p> <pre><code>Operation op;\nif (model.objectMaterialOverriders.GetValue().Count &gt; 0)\nop = balloonModel.objectMaterialOverriders.SetValue(0, new MaterialOverrider() { overrideAllMaterial = true, newMaterial = newMaterial});\nelse\nop = balloonModel.objectMaterialOverriders.Add(new MaterialOverrider() { overrideAllMaterial = true, newMaterial = newMaterial});\n</code></pre>"},{"location":"pages/how-to/change-color-asset/#perform-transaction","title":"Perform transaction","text":"<pre><code>Transaction t = new transaction()\n{\nreliable = true\n};\nt.AddIfNotNull(op);\nt.Dispatch();\n</code></pre>"},{"location":"pages/how-to/create-a-button/","title":"Create a button","text":"<p>Add interactivity to your environment by using the interaction system to make a simple button.</p>"},{"location":"pages/how-to/create-a-button/#set-up-an-interactable-object","title":"Set up an interactable object","text":""},{"location":"pages/how-to/create-a-button/#1-add-a-collider","title":"1. Add a collider","text":"<p>Take that object you want to be interactable on trigger when the user points towards it. It should be an object with a UMI3DModel component on it. Enable the property \"has a collider\".</p> <p></p>"},{"location":"pages/how-to/create-a-button/#2-make-the-object-interactable","title":"2. Make the object interactable","text":"<p>Add an UMI3DInteractable component to the object.</p> <p></p>"},{"location":"pages/how-to/create-a-button/#add-the-trigger-interaction","title":"Add the trigger interaction","text":""},{"location":"pages/how-to/create-a-button/#1-create-the-event","title":"1. Create the event","text":"<p>Add a UMI3DEvent component to the object.</p> <p></p> <p>And reference it in the interactions list of the UMI3DInteractable component.</p> <p></p>"},{"location":"pages/how-to/create-a-button/#2-define-custom-behaviour","title":"2. Define custom behaviour","text":"<p>Add a new script to the object and write down the code to execute when a user triggers the button. Here is an example.</p> <pre><code>using umi3d.edk;\nusing UnityEngine;\nusing static umi3d.edk.interaction.AbstractInteraction;\npublic class ButtonAction : MonoBehaviour\n{\nprivate UMI3DModel buttonModel;\nprivate void Start()\n{\nbuttonModel = GetComponent&lt;UMI3DModel&gt;();\n}\npublic void Press(InteractionEventContent content)\n{\nbuttonModel.transform.Translate(-0.01f * Vector3.up);\nTransaction t = new();\nt.AddIfNotNull(buttonModel.objectPosition.SetValue(content.user, buttonModel.transform.localPosition)); // content.user is the user that triggered the button\nt.Dispatch();\n}\n}\n</code></pre> <p>The Press method will be the method executed when an interaction with the button occurs. Context information is available in the event content parameter.</p> <p>Configure the method to be triggered when a user click on the button in the Unity Inspector.</p> <p></p>"},{"location":"pages/how-to/create-asset-bundles/","title":"Creating Unity AssetBundles","text":""},{"location":"pages/how-to/create-asset-bundles/#creating-an-assetbundle-from-a-fbx-file","title":"Creating an AssetBundle from a FBX file","text":""},{"location":"pages/how-to/create-asset-bundles/#1-setting-up-folders","title":"1. Setting up folders","text":"<p>Create an \"AssetBundle\" folder, an \"Editor\" folder and a \"FBX\u201d folder</p> <p></p>"},{"location":"pages/how-to/create-asset-bundles/#2-add-the-building-script","title":"2. Add the building script","text":"<p>Create a BuildAssetBundle script in the Editor folder and paste the code below inside</p> <pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEditor;\nusing UnityEngine;\npublic class BuildAssetBundle : Editor\n{\n[MenuItem(\"Assets/ Build AssetBundles\")]\nstatic void BuildAllAsseetBundles()\n{\nBuildPipeline.BuildAssetBundles(@\"D:\\Dev\\UMI3DTutorial\\UMI3DTutorial\\Assets\\Project\\Models\\AssetBundles\", BuildAssetBundleOptions.ChunkBasedCompression, BuildTarget.StandaloneWindows64);\n}\n}\n</code></pre> <p>Replace the path in the code so that it references the path of your \u201cAssetBundle\u201d folder</p>"},{"location":"pages/how-to/create-asset-bundles/#3-import-your-assets","title":"3. Import your assets","text":"<p>Copy your FBX file in the \u201cFBX\u201d folder</p> <p></p>"},{"location":"pages/how-to/create-asset-bundles/#4-add-your-asset-to-the-bundle","title":"4. Add your asset to the bundle","text":"<p>Select your FBX file and at the bottom of the Inspector view, select \u201cNew\u201d in the AssetBundle drop down menu, and give the bundle a name (\u201cavatar\u201d here)</p> <p></p>"},{"location":"pages/how-to/create-asset-bundles/#5-build-bundle","title":"5. Build bundle","text":"<p>With the FBX file selected, open the \u201cAssets\u201d menu and click on \u201cBuild AssetBundles\u201d</p> <p></p> <p>When the build is over, the file will be available in your \u201cAssetBundle\u201d folder</p> <p></p>"},{"location":"pages/how-to/create-asset-bundles/#6-load-your-bundle","title":"6. Load your bundle","text":"<p>In order to load the AssetBundles, create a <code>LoadBundle</code> script and paste the code below inside</p> <pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\npublic class LoadBundle : MonoBehaviour\n{\nAssetBundle myLoadAssetBundle;\npublic string path;\npublic string objName;\nvoid Start()\n{\nLoadAssetBundle(path);\nInstantiatedObjectFromBundle(objName);\n}\nvoid LoadAssetBundle(string bundleUrl)\n{\nmyLoadAssetBundle = AssetBundle.LoadFromFile(bundleUrl);\nif (myLoadAssetBundle != null)\n{\nforeach (string n in myLoadAssetBundle.GetAllAssetNames())\n{\nDebug.Log(\"nom=\" + n);\n}\n}\nDebug.Log(myLoadAssetBundle == null ? \"Failed to load AssetBundle \" : \"Load AssetBundle OK\");\n}\nvoid InstantiatedObjectFromBundle(string assetName)\n{\nvar prefab = myLoadAssetBundle.LoadAsset(assetName);\nInstantiate(prefab);\n}\n}\n</code></pre> <p>This script loads the file form the path of the folder and the asset\u2019s name. To know the name of the bundle, a debug is visible on the console window, with all the available names.</p> <p></p>"},{"location":"pages/how-to/group-assets-library/","title":"Group assets in an asset library","text":"<p>Using assets libraries makes it possible to store the required asset for an environment on the client side. So, it does help a lot with speeding up the loading the same environment several times.</p>"},{"location":"pages/how-to/group-assets-library/#define-the-library","title":"Define the library","text":"<p>Create a new asset library as a ScriptableObject</p> <p></p>"},{"location":"pages/how-to/group-assets-library/#configure-the-library","title":"Configure the library","text":"<ol> <li>Enter the library id. Usually \"com.compagny.libraryname\"</li> <li>Click on \"Now\" to update the data value. It is important to click here when you update your library since browsers always look for new version of libraries based on their date.</li> <li>Enter a number of variants. They are different sets of available ressources that could be ajusted to fit the device. For example, there is usually a default variant and an android variant.</li> <li>Enter the name of your variant. Usually default.</li> <li>Enter the path to your variant.</li> <li>Enter the number of files in your library (Optionnal)</li> <li>Enter the list of the format contained in the library</li> </ol>"},{"location":"pages/how-to/group-assets-library/#add-the-library-to-the-environment","title":"Add the library to the environment","text":"<p>Then add the <code>AssetLibrary</code> to UMI3D Ressources objects that belongs to the library in the specified LibraryKey field that possess.</p>"},{"location":"pages/how-to/install-sdk/","title":"Install the UMI3D SDK","text":""},{"location":"pages/how-to/install-sdk/#get-unity","title":"Get Unity","text":"<p>Go on the Unity website and select a plan, then download a version compatible with the UMI3D release you want to use.</p>"},{"location":"pages/how-to/install-sdk/#import-the-sdk","title":"Import the SDK","text":""},{"location":"pages/how-to/install-sdk/#1-get-a-umi3d-sdk-release","title":"1. Get a UMI3D SDK release","text":"<p>Go on the GitHub releases and find the release you want to use.</p>"},{"location":"pages/how-to/install-sdk/#2-download-the-packages","title":"2. Download the packages","text":"<p>Under \"Assets\", download the packages files you want to use. Note that the source code zips are not required to use UMI3D as thay are already integrated in the packages.</p> <p></p>"},{"location":"pages/how-to/install-sdk/#3-import-the-packages","title":"3. Import the packages","text":"<p>For each of the following package, depending on you intended use, drag and drop the file in the Unity project window :</p> Create an environment (EDK)Create a browser (CDK)See complete SDK <ul> <li>edk.unitypackage</li> </ul> <ul> <li>cdk.unitypackage</li> </ul> <ul> <li>core.unitypackage</li> <li>dependencies.unitypackage</li> <li>The complementary modules you want:<ul> <li>interaction-system.unitypackage</li> <li>user-capture.unitypackage</li> <li>collaboration.unitypackage</li> </ul> </li> </ul> <p></p> <p>And import everything.</p> <p></p> <p>If you want basic scripts to launch a server, also import the server-starter-kit.unitypackage file.</p> Troubleshooting Error: Multiple precompiled assemblies <p>On recent versions of Unity, you may run into an error like this:</p> <pre><code>Multiple precompiled assemblies with the same name Newtonsoft.Json.dll included on the current platform. Only one assembly with the same name is allowed per platform. (%USER%/My project/Library/PackageCache/com.unity.nuget.newtonsoft-json@3.0.2/Runtime/Newtonsoft.Json.dll)\n</code></pre> <p>In that case, delete the NewtonSoft.Json.dll file located at <code>Assets/UMI3D SDK/Dependencies/UnityGLTF/Runtime/Plugins/net35/NewtonSoft.Json.dll</code></p> Error: Deterministic compilation failed <p>On recent versions of Unity, you may run into an error like this:</p> <pre><code>Assets\\UMI3D SDK\\Dependencies\\Runtime\\websocket-sharp-master\\websocket-sharp\\AssemblyInfo.cs(19,28): error CS8357: The specified version string contains wildcards, which are not compatible with determinism.\n</code></pre> <p>In that case, go to the Edit&gt;Project&gt;Player settings tab, and disable \"Deterministic compilation\" under \"Other settinggs/Script Compilation\".</p> Error: ComDomProvider could not be found <p>You may run into an error like this:</p> <pre><code>Assets\\UMI3D SDK\\Dependencies\\Runtime\\Forge\\Editor\\ForgeNetworkingEditor.cs(108,18): error CS1069: The type name 'CodeDomProvider' could not be found in the namespace 'System.CodeDom.Compiler'. This type has been forwarded to assembly 'System.CodeDom, Version=4.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' Consider adding a reference to that assembly.\n</code></pre> <p>In that case, go to the Edit&gt;Project&gt;Player settings tab, and under \"Other settinggs/Script Compilation\" switch \"Api Compatibility level\" from \".Net Standard 2.0\" to \".Net 4.x\" ou \".Net Framework\", and restart Unity.</p>"},{"location":"pages/how-to/move-an-asset-at-runtime/","title":"Change an asset properties at runtime","text":"<p>Here is a short guide on how to change an asset properties. For example, we will move a 3D asset with a smooth movement using interpolation.</p>"},{"location":"pages/how-to/move-an-asset-at-runtime/#send-the-proper-umi3d-operation","title":"Send the proper UMI3D operation","text":""},{"location":"pages/how-to/move-an-asset-at-runtime/#1-create-the-script-referencing-the-object","title":"1. Create the script referencing the object","text":"<p>Add a script referencing the object to move</p> <p></p> <pre><code>using umi3d.edk;\nusing UnityEngine;\npublic class MoveBallon : MonoBehaviour\n{\nUMI3DNode balloonModel;\npublic void Start()\n{\nballoonModel = GetComponent&lt;UMI3DNode&gt;();\n}\n}\n</code></pre>"},{"location":"pages/how-to/move-an-asset-at-runtime/#2-define-the-operation","title":"2. Define the Operation","text":"<p>Create a <code>SetValue</code> operation to move the object.</p> <pre><code>Vector3 newPosition = balloonModel.objectPosition.GetValue() + new Vector3(1, 0, 0);\nSetEntityProperty operation = balloonModel.objectPosition.SetValue(newPosition);\n</code></pre>"},{"location":"pages/how-to/move-an-asset-at-runtime/#3-create-the-transaction","title":"3. Create the Transaction","text":"<p>Create a <code>Transaction</code>.</p> <pre><code>Transaction t = new Transaction()\n{\nreliable = true\n};\nt.AddIfNotNull(operation);\n</code></pre>"},{"location":"pages/how-to/move-an-asset-at-runtime/#4-dispatch-the-transaction","title":"4. Dispatch the transaction","text":"<p>Dispatch the transaction.</p> <pre><code>t.Dispatch();\n</code></pre>"},{"location":"pages/how-to/move-an-asset-at-runtime/#activate-interpolation-on-the-property","title":"Activate interpolation on the property","text":"<pre><code>StartInterpolationProperty operation = new StartInterpolationProperty()\n{\nusers = new HashSet&lt;UMI3DUser&gt;(UMI3DCollaborationServer.Collaboration.Users), //send the interpolation to all referenced users\nproperty = balloonModel.objectPosition.propertyId, // id of the property to activate interpolation on\nentityId = balloonModel.objectPosition.entityId,\nstartValue = balloonModel.objectPosition.GetValue()\n};\nTransaction t = new Transaction()\n{\nreliable = true\n};\nt.Add(operation);\nt.Dispatch();\n</code></pre>"},{"location":"pages/how-to/provide-audio-chat/","title":"Provide audio chat","text":""},{"location":"pages/tutorials/","title":"Getting Started","text":"<p>This sections contains a number of tutorials to helps you start right away with UMI3D.</p> <p>This part of the documentation is still under construction.</p> <p>More tutorials to come soon.</p> <p>First steps with the UMI3D EDK</p>"},{"location":"pages/tutorials/first-steps-umi3d-edk/","title":"First steps with the UMI3D Environment Development Kit","text":"<p>This tutorial aims to help Unity developers to start creating Collaborative Virtual Environments with the UMI3D SDK. The created Collaborative Virtual Environment is a basic world only containing avatars for the users and one interaction. For a more advanced sample, have a look on the UMI3D Samples project.</p> <p>Important</p> <p>This tutorial is old and need to be updated.</p> <p>Requirements</p> <ul> <li>UMI3D Version: 1.1.r.210402+</li> <li>Compatible UMI3D Desktop Browser: 1.0.5.210402+</li> <li>Compatible UMI3D OpenVR Browser: 1.0.5.210402+</li> </ul>"},{"location":"pages/tutorials/first-steps-umi3d-edk/#set-up-the-server","title":"Set up the server","text":""},{"location":"pages/tutorials/first-steps-umi3d-edk/#add-a-server","title":"Add a server","text":"<p>Create an empty <code>GameObject</code> and eventually rename it \u201cUMI3DServer\u201d</p> <p></p> <p>Add a <code>UMI3DMainThreadDispatcher</code> component to the GameObject</p> <p></p> <p>Add a <code>UMI3DCollaborationServer</code> component to the GameObject</p> <p></p>"},{"location":"pages/tutorials/first-steps-umi3d-edk/#configure-the-server","title":"Configure the server","text":"<p>Fill the HttpPort field (e.g. 50203) of the <code>UMI3DCollaborationServer</code> component</p> <p></p>"},{"location":"pages/tutorials/first-steps-umi3d-edk/#configure-identification","title":"Configure identification","text":"<p>Create an Identifier script and paste the code below inside.</p> <pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing umi3d.common;\nusing umi3d.common.collaboration;\nusing umi3d.edk.collaboration;\nusing UnityEngine;\n[CreateAssetMenu(fileName = \"identifier\", menuName = \"UMI3D/Identifier\")]\npublic class identifier : IdentifierApi\n{\npublic string pin = \"0000\"; // (1)\n///&lt;inheritdoc/&gt;\npublic override UMI3DAuthenticator GetAuthenticator(ref AuthenticationType type)\n{\nreturn new UMI3DAuthenticator(pin);\n}\n}\n</code></pre> <ol> <li>You could define any other numeric pin.</li> </ol> <p>Create an <code>Identifier</code> asset in the Script folder</p> <p></p> <p>Assign the created Identifier to the Identifier field of the UMI3DCollaborationServer component</p> <p></p>"},{"location":"pages/tutorials/first-steps-umi3d-edk/#add-a-launcher","title":"Add a launcher","text":"<p>Create an empty <code>GameObject</code> and eventually rename it \u201cUMI3DLauncher\u201d</p> <p></p> <p>Add a <code>UMI3DLauncher</code> component to the GameObject</p> <p></p> <p>Tick the Launch Server On Start option</p> <p></p>"},{"location":"pages/tutorials/first-steps-umi3d-edk/#define-an-environment","title":"Define an environment","text":""},{"location":"pages/tutorials/first-steps-umi3d-edk/#create-an-environment","title":"Create an environment","text":"<p>Create an empty <code>GameObject</code> and eventually rename it \u201cUMI3DEnv\u201d.</p> <p></p> <p>Add a <code>UMI3DCollaborationEnvironment</code> component to the GameObject</p> <p></p> <p>Fill the Environment Name field as wanted (testGPR in the screenshot)</p> <p></p>"},{"location":"pages/tutorials/first-steps-umi3d-edk/#create-a-scene","title":"Create a scene","text":"<p>Create an empty <code>GameObject</code> under the UMI3DEnv <code>GameObject</code> and eventually rename it \u201cScene\u201d</p> <p></p> <p>Add a <code>UMI3DScene</code> component to this new <code>GameObject</code></p> <p></p> <p>Create an empty <code>GameObject</code> under the UMI3DEnv GameObject and eventually rename it \u201cSceneEmbo \u201d</p> <p></p> <p>Add a <code>UMI3DScene</code> component to this new <code>GameObject</code></p> <p></p>"},{"location":"pages/tutorials/first-steps-umi3d-edk/#set-up-avatars","title":"Set up avatars","text":""},{"location":"pages/tutorials/first-steps-umi3d-edk/#add-a-custom-avatar","title":"Add a custom avatar","text":"<p>Create a empty <code>GameObject</code> and eventually rename it \u201cPerso\u201d</p> <p></p> <p>Add a <code>UMI3DModel</code> component to the GameObject</p> <p></p> <p>Set the size of Variants to 1, select Unity_standalone and add the path where the AssetBundle is. In order to have a visual representation of the avatar on the environment, I added the \u201cLoadBundle\u201d component.</p> <p>Create a prefab of the whole asset in the Prefab folder and remove it from the scene.</p>"},{"location":"pages/tutorials/first-steps-umi3d-edk/#configure-user-body-tracking","title":"Configure user body tracking","text":"<p>Create an empty <code>GameObject</code> and eventually rename it \u201cUMI3DEmboManager\u201d</p> <p></p> <p>Add a <code>UMI3DEmbodimentManager</code> component to this new <code>GameObject</code></p> <p></p> <p>Assign the <code>UMI3DScene</code> of the <code>GameObject</code> \"SceneEmbo\u201c to the Embodiments Scene field of the <code>UMI3DEmbodimentManager</code> component</p> <p></p> <p>Create an AvatarManager script and paste the code below inside.</p> <pre><code>```cs\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing umi3d.edk;\nusing umi3d.common.userCapture;\nusing umi3d.edk.userCapture;\nusing System;\nusing umi3d.common;\n\npublic class AvatarManager : MonoBehaviour\n{\n    public GameObject modelPrefab;\n\n    //Attacher un objet aux \n    static public Dictionary&lt;String, GameObject&gt; avtBones = new Dictionary&lt;String, GameObject&gt;();\n    static public Dictionary&lt;String, UMI3DModel&gt; avtModele = new Dictionary&lt;String, UMI3DModel&gt;();\n    static public Dictionary&lt;UMI3DUserEmbodimentBone, UMI3DBinding&gt; avtBind = new Dictionary&lt;UMI3DUserEmbodimentBone, UMI3DBinding&gt;();\n    public List&lt;bindList&gt; listBindList = new List&lt;bindList&gt;();\n\n    // Start is called before the first frame update\n    void Start()\n    {\n        UMI3DEmbodimentManager.Instance.CreationEvent.AddListener(CreateBone);\n        UMI3DEmbodimentManager.Instance.UpdateEvent.AddListener(UpdateBone);\n        UMI3DEmbodimentManager.Instance.DeletionEvent.AddListener(DeleteBone);\n        UMI3DEmbodimentManager.Instance.NewEmbodiment.AddListener(InstanciateEmbodiment);\n    }\n\n    protected void InstanciateEmbodiment(UMI3DAvatarNode AvatarNode)\n    {\n        GameObject go = GameObject.Instantiate(modelPrefab, AvatarNode.transform);\n        go.transform.localPosition = new Vector3(0, -1.60f, 0);\n        LoadEntity le = go.GetComponent&lt;UMI3DModel&gt;().GetLoadEntity();\n        List&lt;Operation&gt; lop = new List&lt;Operation&gt;();\n        lop.Add(le);\n        avtModele.Add(AvatarNode.userId, go.GetComponent&lt;UMI3DModel&gt;());\n        UMI3DServer.Dispatch(new Transaction() { Operations = lop, reliable = true });\n    }\n\n    protected void DeleteBone(UMI3DUserEmbodimentBone UserEmbodimentBone)\n    {\n        GameObject go = avtBones[UserEmbodimentBone.boneType];\n        Destroy(go);\n        avtBones.Remove(UserEmbodimentBone.boneType);\n    }\n\n    protected void UpdateBone(UMI3DUserEmbodimentBone UserEmbodimentBone)\n    {\n        GameObject go = avtBones[UserEmbodimentBone.boneType];\n        go.transform.localPosition = UserEmbodimentBone.spatialPosition.localPosition;\n        go.transform.localRotation = UserEmbodimentBone.spatialPosition.localRotation;\n    }\n\n    protected void CreateBone(UMI3DUserEmbodimentBone UserEmbodimentBone)\n    {\n\n        String id = UserEmbodimentBone.userId;\n        UMI3DAvatarNode avnode = UMI3DEmbodimentManager.Instance.embodimentInstances[id];\n        GameObject go = new GameObject(\"Bone:\" + UserEmbodimentBone.boneType);\n        go.transform.parent = avnode.transform;\n        go.transform.localPosition = UserEmbodimentBone.spatialPosition.localPosition;\n        go.transform.localRotation = UserEmbodimentBone.spatialPosition.localRotation;\n        avtBones.Add(UserEmbodimentBone.boneType, go);\n        bindList bl = listBindList[0];\n        foreach (bind b in bl.bList)\n        {\n            UMI3DBinding binding = new UMI3DBinding()\n            {\n                boneType = b.boneType,\n                rigName = b.rigName,\n                offsetRotation = Quaternion.Euler(b.rotationOffset),\n                offsetPosition = b.positionOffset,\n                node = avtModele[id]\n            };\n\n        }\n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n\n    }\n\n    [System.Serializable]\n    public class bind\n    {\n        [ConstStringEnum(typeof(BoneType))]\n        public String boneType;\n        public String rigName;\n        public Vector3 positionOffset;\n        public Vector3 rotationOffset;\n\n    }\n    [System.Serializable]\n    public class bindList\n    {\n        public List&lt;bind&gt; bList = new List&lt;bind&gt;();\n    }\n}\n```\n</code></pre> <p>Add a <code>AvatarManager</code> component (with the created script) to the \u201cUMI3DEmboManager\u201d <code>GameObject</code></p> <p></p> <p>Add the \u00ab X \u00bb prefab in the modelPrefab field of the AvatarManager component</p> <p></p> <p>Set the size of List Bind List to 1, the size of B List to 1, choose \u201chead\u201d as a BoneType and set the name of the corresponding Bone in the model's structure (\u201cHead\u201d in our case)</p> <p></p>"},{"location":"pages/tutorials/first-steps-umi3d-edk/#support-audio","title":"Support audio","text":"<p>Create an empty <code>GameObject</code> and eventually name it \u201cUMI3DAudio\u201d</p> <p></p> <p>Add a <code>UMI3DAudioBridger</code> component to the <code>GameObject</code></p> <p></p>"},{"location":"pages/tutorials/first-steps-umi3d-edk/#populate-the-scene-with-a-3d-asset","title":"Populate the scene with a 3D asset","text":"<p>Create an empty <code>GameObject</code> and eventually name it \u201cobj1\u201d under the \u201cscene\u201d <code>GameObject</code></p> <p> </p> <p>Add a <code>UMI3DModel</code> component to this new <code>GameObject</code></p> <p></p> <p>Select the path of the object, its format and its extension in the corresponding fields</p> <p></p>"},{"location":"pages/tutorials/first-steps-umi3d-edk/#enrich-the-experience-with-interactions","title":"Enrich the experience with interactions","text":"<p>Add a <code>UMI3DEvent</code> component to the \u201cobj1\u201d GameObject</p> <p></p> <p>Add a <code>StringParameter</code> component to the \u201cobj1\u201d GameObject</p> <p></p> <p>Add a <code>UMI3DInteractable</code> component to the \u201cobj1\u201d GameObject</p> <p></p> <p>Add a <code>UMI3DManipulation</code> component to the \u201cobj1\u201d GameObject</p> <p></p>"},{"location":"pages/tutorials/first-steps/","title":"First steps with the UMI3D Environments","text":""},{"location":"pages/tutorials/first-steps/#install-the-umi3d-sdk","title":"Install the UMI3D SDK","text":""},{"location":"pages/tutorials/first-steps/#get-unity","title":"Get Unity","text":"<p>Go on the Unity website and select a plan, then download a version compatible with the UMI3D release you want to use.</p> <p>Create a new 3D project within Unity.</p>"},{"location":"pages/tutorials/first-steps/#import-the-sdk","title":"Import the SDK","text":""},{"location":"pages/tutorials/first-steps/#1-get-a-umi3d-sdk-release","title":"1. Get a UMI3D SDK release","text":"<p>Go on the GitHub releases and find the release you want to use.</p>"},{"location":"pages/tutorials/first-steps/#2-download-the-packages","title":"2. Download the packages","text":"<p>Under \"Assets\", download the packages files you want to use. Note that the source code zips are not required to use UMI3D as thay are already integrated in the packages.</p> <p></p>"},{"location":"pages/tutorials/first-steps/#3-import-the-packages","title":"3. Import the packages","text":"<p>Drag and drop the file edk.unitypackage in the Unity project window.</p> <p>Also drag and drop the file server-starter-kit.unitypackage. It contains useful ready-to-use configuration to start a UMI3D server quickly.</p> <p></p> <p>And import everything.</p> <p></p> Troubleshooting Error: Multiple precompiled assemblies <p>On recent versions of Unity, you may run into an error like this:</p> <pre><code>Multiple precompiled assemblies with the same name Newtonsoft.Json.dll included on the current platform. Only one assembly with the same name is allowed per platform. (%USER%/My project/Library/PackageCache/com.unity.nuget.newtonsoft-json@3.0.2/Runtime/Newtonsoft.Json.dll)\n</code></pre> <p>In that case, delete the NewtonSoft.Json.dll file located at <code>Assets/UMI3D SDK/Dependencies/UnityGLTF/Runtime/Plugins/net35/NewtonSoft.Json.dll</code></p> Error: Deterministic compilation failed <p>On recent versions of Unity, you may run into an error like this:</p> <pre><code>Assets\\UMI3D SDK\\Dependencies\\Runtime\\websocket-sharp-master\\websocket-sharp\\AssemblyInfo.cs(19,28): error CS8357: The specified version string contains wildcards, which are not compatible with determinism.\n</code></pre> <p>In that case, go to the Edit&gt;Project&gt;Player settings tab, and disable \"Deterministic compilation\" under \"Other settinggs/Script Compilation\".</p> Error: ComDomProvider could not be found <p>You may run into an error like this:</p> <pre><code>Assets\\UMI3D SDK\\Dependencies\\Runtime\\Forge\\Editor\\ForgeNetworkingEditor.cs(108,18): error CS1069: The type name 'CodeDomProvider' could not be found in the namespace 'System.CodeDom.Compiler'. This type has been forwarded to assembly 'System.CodeDom, Version=4.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' Consider adding a reference to that assembly.\n</code></pre> <p>In that case, go to the Edit&gt;Project&gt;Player settings tab, and under \"Other settinggs/Script Compilation\" switch \"Api Compatibility level\" from \".Net Standard 2.0\" to \".Net 4.x\" ou \".Net Framework\", and restart Unity.</p>"},{"location":"pages/tutorials/first-steps/#_1","title":"First steps with the UMI3D Environments","text":""}]}