{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"What is UMI3D?","text":"<p>UMI3D is a web protocol that enables the creation of 3D media in which users of any AR/VR device can collaborate in real time. The 3D media is created once and hosted on a server or on a local computer. Any XR device can display and interact with it remotely thanks to a dedicated UMI3D browser.</p> <p></p> <p>Creating experiences with UMI3D helps to reduce the number of experiences that should be developed to treat the same use case with different devices. Moreover, it enables different devices to interact within a same experience without any further development.</p> <p></p>"},{"location":"#how-does-it-work","title":"How does it work?","text":"<p>UMI3D relies on an interaction-based device abstraction layer. It allows remote 3D media created with the UMI3D SDK to describe its possible interactions with a finite and limited set of objects.</p> <p></p> <p>Each UMI3D browser supervises the loading/synchronization of 3D content, as well as the dynamic generation of an adapted to the device user interface, allowing its user to perform the described interactions. The main difference with existing cross-platform development standards such as WebVR or OpenXR is UMI3D's interaction-based device abstraction layer. These standards are limiting the designer to the usage of devices' common features. UMI3D enables to use all of the device's features to perform the interaction received.</p>"},{"location":"pages/about/license/","title":"UMI3D SDK License","text":"<p>Apache License</p> <p>Version 2.0, January 2004</p> <p>http://www.apache.org/licenses/</p> <p>TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION</p> <ol> <li> <p>Definitions.</p> <p>\"License\" shall mean the terms and conditions for use, reproduction,   and distribution as defined by Sections 1 through 9 of this document.</p> <p>\"Licensor\" shall mean the copyright owner or entity authorized by   the copyright owner that is granting the License.</p> <p>\"Legal Entity\" shall mean the union of the acting entity and all   other entities that control, are controlled by, or are under common   control with that entity. For the purposes of this definition,   \"control\" means (i) the power, direct or indirect, to cause the   direction or management of such entity, whether by contract or   otherwise, or (ii) ownership of fifty percent (50%) or more of the   outstanding shares, or (iii) beneficial ownership of such entity.</p> <p>\"You\" (or \"Your\") shall mean an individual or Legal Entity   exercising permissions granted by this License.</p> <p>\"Source\" form shall mean the preferred form for making modifications,   including but not limited to software source code, documentation   source, and configuration files.</p> <p>\"Object\" form shall mean any form resulting from mechanical   transformation or translation of a Source form, including but   not limited to compiled object code, generated documentation,   and conversions to other media types.</p> <p>\"Work\" shall mean the work of authorship, whether in Source or   Object form, made available under the License, as indicated by a   copyright notice that is included in or attached to the work   (an example is provided in the Appendix below).</p> <p>\"Derivative Works\" shall mean any work, whether in Source or Object   form, that is based on (or derived from) the Work and for which the   editorial revisions, annotations, elaborations, or other modifications   represent, as a whole, an original work of authorship. For the purposes   of this License, Derivative Works shall not include works that remain   separable from, or merely link (or bind by name) to the interfaces of,   the Work and Derivative Works thereof.</p> <p>\"Contribution\" shall mean any work of authorship, including   the original version of the Work and any modifications or additions   to that Work or Derivative Works thereof, that is intentionally   submitted to Licensor for inclusion in the Work by the copyright owner   or by an individual or Legal Entity authorized to submit on behalf of   the copyright owner. For the purposes of this definition, \"submitted\"   means any form of electronic, verbal, or written communication sent   to the Licensor or its representatives, including but not limited to   communication on electronic mailing lists, source code control systems,   and issue tracking systems that are managed by, or on behalf of, the   Licensor for the purpose of discussing and improving the Work, but   excluding communication that is conspicuously marked or otherwise   designated in writing by the copyright owner as \"Not a Contribution.\"</p> <p>\"Contributor\" shall mean Licensor and any individual or Legal Entity   on behalf of whom a Contribution has been received by Licensor and   subsequently incorporated within the Work.</p> </li> <li> <p>Grant of Copyright License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       copyright license to reproduce, prepare Derivative Works of,       publicly display, publicly perform, sublicense, and distribute the       Work and such Derivative Works in Source or Object form.</p> </li> <li> <p>Grant of Patent License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       (except as stated in this section) patent license to make, have made,       use, offer to sell, sell, import, and otherwise transfer the Work,       where such license applies only to those patent claims licensable       by such Contributor that are necessarily infringed by their       Contribution(s) alone or by combination of their Contribution(s)       with the Work to which such Contribution(s) was submitted. If You       institute patent litigation against any entity (including a       cross-claim or counterclaim in a lawsuit) alleging that the Work       or a Contribution incorporated within the Work constitutes direct       or contributory patent infringement, then any patent licenses       granted to You under this License for that Work shall terminate       as of the date such litigation is filed.</p> </li> <li> <p>Redistribution. You may reproduce and distribute copies of the       Work or Derivative Works thereof in any medium, with or without       modifications, and in Source or Object form, provided that You       meet the following conditions:</p> <p>(a) You must give any other recipients of the Work or       Derivative Works a copy of this License; and</p> <p>(b) You must cause any modified files to carry prominent notices       stating that You changed the files; and</p> <p>(c) You must retain, in the Source form of any Derivative Works       that You distribute, all copyright, patent, trademark, and       attribution notices from the Source form of the Work,       excluding those notices that do not pertain to any part of       the Derivative Works; and</p> <p>(d) If the Work includes a \"NOTICE\" text file as part of its       distribution, then any Derivative Works that You distribute must       include a readable copy of the attribution notices contained       within such NOTICE file, excluding those notices that do not       pertain to any part of the Derivative Works, in at least one       of the following places: within a NOTICE text file distributed       as part of the Derivative Works; within the Source form or       documentation, if provided along with the Derivative Works; or,       within a display generated by the Derivative Works, if and       wherever such third-party notices normally appear. The contents       of the NOTICE file are for informational purposes only and       do not modify the License. You may add Your own attribution       notices within Derivative Works that You distribute, alongside       or as an addendum to the NOTICE text from the Work, provided       that such additional attribution notices cannot be construed       as modifying the License.</p> <p>You may add Your own copyright statement to Your modifications and   may provide additional or different license terms and conditions   for use, reproduction, or distribution of Your modifications, or   for any such Derivative Works as a whole, provided Your use,   reproduction, and distribution of the Work otherwise complies with   the conditions stated in this License.</p> </li> <li> <p>Submission of Contributions. Unless You explicitly state otherwise,       any Contribution intentionally submitted for inclusion in the Work       by You to the Licensor shall be under the terms and conditions of       this License, without any additional terms or conditions.       Notwithstanding the above, nothing herein shall supersede or modify       the terms of any separate license agreement you may have executed       with Licensor regarding such Contributions.</p> </li> <li> <p>Trademarks. This License does not grant permission to use the trade       names, trademarks, service marks, or product names of the Licensor,       except as required for reasonable and customary use in describing the       origin of the Work and reproducing the content of the NOTICE file.</p> </li> <li> <p>Disclaimer of Warranty. Unless required by applicable law or       agreed to in writing, Licensor provides the Work (and each       Contributor provides its Contributions) on an \"AS IS\" BASIS,       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or       implied, including, without limitation, any warranties or conditions       of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A       PARTICULAR PURPOSE. You are solely responsible for determining the       appropriateness of using or redistributing the Work and assume any       risks associated with Your exercise of permissions under this License.</p> </li> <li> <p>Limitation of Liability. In no event and under no legal theory,       whether in tort (including negligence), contract, or otherwise,       unless required by applicable law (such as deliberate and grossly       negligent acts) or agreed to in writing, shall any Contributor be       liable to You for damages, including any direct, indirect, special,       incidental, or consequential damages of any character arising as a       result of this License or out of the use or inability to use the       Work (including but not limited to damages for loss of goodwill,       work stoppage, computer failure or malfunction, or any and all       other commercial damages or losses), even if such Contributor       has been advised of the possibility of such damages.</p> </li> <li> <p>Accepting Warranty or Additional Liability. While redistributing       the Work or Derivative Works thereof, You may choose to offer,       and charge a fee for, acceptance of support, warranty, indemnity,       or other liability obligations and/or rights consistent with this       License. However, in accepting such obligations, You may act only       on Your own behalf and on Your sole responsibility, not on behalf       of any other Contributor, and only if You agree to indemnify,       defend, and hold each Contributor harmless for any liability       incurred by, or claims asserted against, such Contributor by reason       of your accepting any such warranty or additional liability.</p> </li> </ol> <p>END OF TERMS AND CONDITIONS</p> <p>Copyright 2019-2022 Gfi Informatique Inetum</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\");    you may not use this file except in compliance with the License.    You may obtain a copy of the License at </p> <p>http://www.apache.org/licenses/LICENSE-2.0</p> <p>Unless required by applicable law or agreed to in writing, software    distributed under the License is distributed on an \"AS IS\" BASIS,    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    See the License for the specific language governing permissions and    limitations under the License.</p> <p>## Attributions</p> <p>Some used on this website are open source icons created by Freepik or Smashicons from Flaticon.</p>"},{"location":"pages/api-reference/","title":"API Reference","text":""},{"location":"pages/api-reference/#generated-documentation","title":"Generated documentation","text":"<p>Automatically generated documentation from code is available here.</p>"},{"location":"pages/api-reference/#modules","title":"Modules","text":"<p>UMI3D is composed of four modules:</p> <ol> <li>Core</li> <li>InteractionSystem</li> <li>UserCapture</li> <li>Collaboration</li> </ol> <p>More API descriptions to come soon.</p> <p></p>"},{"location":"pages/api-reference/#packages","title":"Packages","text":"<p>The SDK is exported in three packages:</p> <ul> <li>Common: Contains all the UMI3D network standardization</li> <li>EDK: Contains all classes for UMI3D environment design and hosting on a server</li> <li>CDK: Contains all classes for UMI3D environments access through a browser</li> </ul> <p>To develop an environment you'll need Common+EDK, to develop a browser you need Common+CDK.</p>"},{"location":"pages/api-reference/environment-description/","title":"Environment description","text":""},{"location":"pages/api-reference/environment-description/#gltf-base","title":"glTF base","text":"<p>The environment description used in UMI3D relies on the glTF open standard for three-dimmensional scenes and models desscription, from the Khronos Group. The glTF standard represent an environment as a tree of nodes, that may possess differents properties (better known as components). The glTF standard admits extensions to properties, to extend their abilities. A such, each UMI3D component is an extension of a glTF property.</p>"},{"location":"pages/api-reference/environment-description/#environment","title":"Environment","text":"<p>An Environment is the root of the scene graph. It also comprise other essential information such as its name.</p>"},{"location":"pages/api-reference/environment-description/#scene","title":"Scene","text":"<p>An Environment can possess several scene that could be displayed at one. From and including the scene, each child node has its own transform component (a position and a rotation)</p>"},{"location":"pages/api-reference/environment-description/#3d-assets","title":"3D Assets","text":"<p>UMI3D provides extensions for a lot of usual 3D assets that are node components (Models, Meshes, Lights, Canvas...).</p> <ul> <li>3D Rendered<ul> <li>Line</li> <li>Mesh</li> <li>Model</li> <li>Submodel</li> </ul> </li> <li>UI<ul> <li>Canvas</li> <li>Rect</li> <li>Text</li> <li>Image</li> </ul> </li> <li>Other<ul> <li>Light</li> </ul> </li> </ul>"},{"location":"pages/api-reference/environment-description/#material","title":"Material","text":"<p>Materials could be added to the environment to be used by other assets.</p> <p>Suported Materials are</p> <ul> <li>PBR materials</li> <li>External materials</li> </ul>"},{"location":"pages/api-reference/environment-description/#animations","title":"Animations","text":"<p>An animation is the description of any playable sequence of a media. Node animation thus moves nodes while video and audio animation based on specific ressources can also be played.</p> <p>Supported animation are</p> <ul> <li>Video</li> <li>Audio</li> <li>3D movement animation</li> <li>Animation through animators</li> </ul>"},{"location":"pages/api-reference/environment-description/#shaders","title":"Shaders","text":"<p>Shaders with custom properties are supported.</p>"},{"location":"pages/api-reference/environment-description/#post-processing-effects","title":"Post-Processing effects","text":"<p>Post-Processing effects are packaged with the environment to tell the browser to execute them if possible.</p> <p>Currently supported post-processing effects are</p> <ul> <li>Deferred fog</li> <li>Global bloom</li> <li>Global vignette</li> </ul>"},{"location":"pages/api-reference/environment-synchronization/","title":"Environment synchronization","text":"<p>After a enviroment has been loaded on a browser, changes can happen to objects in the remotely hosted enviroment (e.g. a moving ball, or color change on a wall). It is necessary to maintain a coherence between the environment description on the server and the one on the browsers.</p>"},{"location":"pages/api-reference/environment-synchronization/#entities","title":"Entities","text":"<p>Any object that belongs to an environment and is concerned by the environment synchronization is a <code>UMI3DEntity</code>. This includes all objects on the scene graph but all entities are not necessarily a part of the scene description. A <code>UMI3DEntity</code> possesses a unique ID that s attributed by the server on runtime and one or several <code>EntityProperty</code>.</p>"},{"location":"pages/api-reference/environment-synchronization/#transactions","title":"Transactions","text":"<p>A <code>Transaction</code> is the wrapper around one ore several <code>Operations</code> and is the message sent from the server to the clients to inform the connected browsers of a change. A transaction could be either reliable or not. Reliable transactions are guarranted to be received by clients, at the cost of a longer message and processing, while unreliable transactions do not have this verification step, making them lighter and faster.</p>"},{"location":"pages/api-reference/environment-synchronization/#environment-synchronization_1","title":"Environment Synchronization","text":""},{"location":"pages/api-reference/environment-synchronization/#operations","title":"Operations","text":"<p>An <code>Operation</code> is a unit change to a UMI3D <code>Entity</code>. It could either be its loading and destroying, or ore often the setting of one of its asynchroneous properties. Each type of <code>EntityProperty</code> is identified in UMI3D through a unique ID. See the Networking section for more information.</p> <p>Syntax for a new transaction:</p> <pre><code>Operation operation = new SetEntityListProperty()\n{\nusers = new HashSet&lt;UMI3DUser&gt;(UMI3DServer.Instance.Users()),\nentityId = entityId,\nproperty = propertyId,\nvalue = aValue\n};\nTransaction transaction = new Transaction() { reliable = true; };\ntransaction.Add(operation );\ntransaction.Dispatch();\n</code></pre>"},{"location":"pages/api-reference/environment-synchronization/#asynchroneous-properties","title":"Asynchroneous Properties","text":"<p>Asynchroneous properties (<code>AsyncProperties</code>) are properties of UMI3D entities that are allowed to be set and to be different from one user to another, resulting in two different values in two different browsers.</p> <p>Their value is set through a <code>SetValue()</code> call on the AsyncProperty wrapper. It returns a <code>Transaction</code> ready to be dispatched.</p>"},{"location":"pages/explanation/","title":"Explanations","text":"<p>To come </p>"},{"location":"pages/how-to/","title":"How-to guides","text":"<p>This sections contains a number of small guides that can be thought as recipes in order to quickly achieve a specific goal.</p> <ul> <li>Asset management:<ul> <li>Add a 3D Model to a scene</li> <li>Change an asset property at runtime</li> <li>Override the material's color of an asset</li> <li>Group assets in an asset library</li> </ul> </li> </ul> <p>More guides to come soon.</p>"},{"location":"pages/how-to/add-a-3d-model/","title":"Add a 3D model","text":""},{"location":"pages/how-to/add-a-3d-model/#store-your-3d-asset","title":"Store your 3D asset","text":""},{"location":"pages/how-to/add-a-3d-model/#1-define-a-place-of-stage","title":"1. Define a place of stage","text":"<p>Find the \"/data\" folder at the root of your project.</p> <p></p> <p>You should create the folder if you do not have it.</p>"},{"location":"pages/how-to/add-a-3d-model/#2-define-the-storage-access-level","title":"2. Define the storage access level","text":"<p>Choose whether your file should be publicly available or not by choosing the corresponding folder.</p> <p></p> <p>You should create the folders if you do not have them.</p>"},{"location":"pages/how-to/add-a-3d-model/#3-import-your-asset","title":"3. Import your asset","text":"<p>Add your 3D assets to any subfolder of your choice.</p> <p></p>"},{"location":"pages/how-to/add-a-3d-model/#reference-it-in-the-scene","title":"Reference it in the scene","text":""},{"location":"pages/how-to/add-a-3d-model/#1-add-a-new-gameobject","title":"1. Add a new gameobject","text":"<p>Open your environment. Under your <code>UMI3D Scene</code> node, add an empty object.</p> <p></p>"},{"location":"pages/how-to/add-a-3d-model/#2-add-a-model-component","title":"2. Add a Model component","text":"<p>Add a <code>UMI3D Model</code> component to that node.</p> <p></p>"},{"location":"pages/how-to/add-a-3d-model/#3-set-up-variants","title":"3. Set up variants","text":"<p>Unwrap the variants parameters and set the size value to 1 to add a variant</p> <p></p>"},{"location":"pages/how-to/add-a-3d-model/#4-set-up-format","title":"4. Set up format","text":"<p>Set up the format to the one of the model to link, check the Is a local file checkbox, and browse in your file explorer towards the desired 3D model.</p> <p></p>"},{"location":"pages/how-to/add-a-3d-model/#modify-its-position-orientation-or-size","title":"Modify its position, orientation or size","text":""},{"location":"pages/how-to/add-a-3d-model/#1-display-a-local-copy","title":"1. Display a local copy","text":"<p>Add an import of the model through Unity to see your model in the editor.</p> <p></p> <p></p>"},{"location":"pages/how-to/add-a-3d-model/#2-apply-any-transformation","title":"2. Apply any transformation","text":"<p>Modify the Transform component on the node that has the <code>UMI3D Model</code> component attached. Here, the scale is reduced to (0.25, 0.25, 0,25).</p> <p></p> <p></p>"},{"location":"pages/how-to/add-a-3d-model/#troubleshooting","title":"Troubleshooting","text":"<p>Make sure the node with <code>UMI3D Model</code> component has all its parents up to the node with the <code>UMI3D Scene</code> component having <code>UMI3D Node</code> components.</p>"},{"location":"pages/how-to/change-color-asset/","title":"Override the color of an asset","text":""},{"location":"pages/how-to/change-color-asset/#define-a-new-material","title":"Define a new Material","text":"<p>Create a Material Scriptable Object.</p> <p></p> <p>Such as a Umi3D_External_Material or a Umi3D_PBR_Material.</p> <p></p>"},{"location":"pages/how-to/change-color-asset/#change-color-by-script","title":"Change color by script","text":"<p>Create a script referencing the object and the material.</p> <p></p> <pre><code>using umi3d.edk;\nusing UnityEngine;\n\npublic class ChangeBalloonColor : MonoBehaviour\n{\nUMI3DModel balloonModel;\n\npublic MaterialSO newMaterial;\n\npublic void Start()\n{\nballoonModel = GetComponent&lt;UMI3DModel&gt;();\n}\n\n}\n</code></pre>"},{"location":"pages/how-to/change-color-asset/#override-the-material","title":"Override the material","text":"<p>Override the material by setting a new Material overrider to the object.</p> <pre><code>Operation op;\nif (model.objectMaterialOverriders.GetValue().Count &gt; 0)\nop = balloonModel.objectMaterialOverriders.SetValue(0, new MaterialOverrider() { overrideAllMaterial = true, newMaterial = newMaterial});\nelse\nop = balloonModel.objectMaterialOverriders.Add(new MaterialOverrider() { overrideAllMaterial = true, newMaterial = newMaterial});\n</code></pre>"},{"location":"pages/how-to/change-color-asset/#perform-transaction","title":"Perform transaction","text":"<pre><code>Transaction t = new transaction()\n{\nreliable = true\n};\nt.AddIfNotNull(op);\nt.Dispatch();\n</code></pre>"},{"location":"pages/how-to/create-asset-bundles/","title":"Creating Unity AssetBundles","text":""},{"location":"pages/how-to/create-asset-bundles/#creating-an-assetbundle-from-a-fbx-file","title":"Creating an AssetBundle from a FBX file","text":""},{"location":"pages/how-to/create-asset-bundles/#1-setting-up-folders","title":"1. Setting up folders","text":"<p>Create an \"AssetBundle\" folder, an \"Editor\" folder and a \"FBX\u201d folder</p> <p></p>"},{"location":"pages/how-to/create-asset-bundles/#2-add-the-building-script","title":"2. Add the building script","text":"<p>Create a BuildAssetBundle script in the Editor folder and paste the code below inside</p> <pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEditor;\nusing UnityEngine;\n\npublic class BuildAssetBundle : Editor\n{\n[MenuItem(\"Assets/ Build AssetBundles\")]\n\nstatic void BuildAllAsseetBundles()\n{\nBuildPipeline.BuildAssetBundles(@\"D:\\Dev\\UMI3DTutorial\\UMI3DTutorial\\Assets\\Project\\Models\\AssetBundles\", BuildAssetBundleOptions.ChunkBasedCompression, BuildTarget.StandaloneWindows64);\n}\n}\n</code></pre> <p>Replace the path in the code so that it references the path of your \u201cAssetBundle\u201d folder</p>"},{"location":"pages/how-to/create-asset-bundles/#3-import-your-assets","title":"3. Import your assets","text":"<p>Copy your FBX file in the \u201cFBX\u201d folder</p> <p></p>"},{"location":"pages/how-to/create-asset-bundles/#4-add-your-asset-to-the-bundle","title":"4. Add your asset to the bundle","text":"<p>Select your FBX file and at the bottom of the Inspector view, select \u201cNew\u201d in the AssetBundle drop down menu, and give the bundle a name (\u201cavatar\u201d here)</p> <p></p>"},{"location":"pages/how-to/create-asset-bundles/#5-build-bundle","title":"5. Build bundle","text":"<p>With the FBX file selected, open the \u201cAssets\u201d menu and click on \u201cBuild AssetBundles\u201d</p> <p></p> <p>When the build is over, the file will be available in your \u201cAssetBundle\u201d folder</p> <p></p>"},{"location":"pages/how-to/create-asset-bundles/#6-load-your-bundle","title":"6. Load your bundle","text":"<p>In order to load the AssetBundles, create a <code>LoadBundle</code> script and paste the code below inside</p> <pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class LoadBundle : MonoBehaviour\n{\nAssetBundle myLoadAssetBundle;\npublic string path;\npublic string objName;\nvoid Start()\n{\nLoadAssetBundle(path);\nInstantiatedObjectFromBundle(objName);\n}\nvoid LoadAssetBundle(string bundleUrl)\n{\nmyLoadAssetBundle = AssetBundle.LoadFromFile(bundleUrl);\n\nif (myLoadAssetBundle != null)\n{\nforeach (string n in myLoadAssetBundle.GetAllAssetNames())\n{\nDebug.Log(\"nom=\" + n);\n}\n}\nDebug.Log(myLoadAssetBundle == null ? \"Failed to load AssetBundle \" : \"Load AssetBundle OK\");\n}\n\nvoid InstantiatedObjectFromBundle(string assetName)\n{\nvar prefab = myLoadAssetBundle.LoadAsset(assetName);\nInstantiate(prefab);\n}\n}\n</code></pre> <p>This script loads the file form the path of the folder and the asset\u2019s name. To know the name of the bundle, a debug is visible on the console window, with all the available names.</p> <p></p>"},{"location":"pages/how-to/group-assets-library/","title":"Group assets in an asset library","text":"<p>Using assets libraries makes it possible to store the required asset for an environment on the client side. So, it does help a lot with speeding up the loading the same environment several times.</p>"},{"location":"pages/how-to/group-assets-library/#define-the-library","title":"Define the library","text":"<p>Create a new asset library as a ScriptableObject</p> <p></p>"},{"location":"pages/how-to/group-assets-library/#configure-the-library","title":"Configure the library","text":"<ol> <li>Enter the library id. Usually \"com.compagny.libraryname\"</li> <li>Click on \"Now\" to update the data value. It is important to click here when you update your library since browsers always look for new version of libraries based on their date.</li> <li>Enter a number of variants. They are different sets of available ressources that could be ajusted to fit the device. For example, there is usually a default variant and an android variant.</li> <li>Enter the name of your variant. Usually default.</li> <li>Enter the path to your variant.</li> <li>Enter the number of files in your library (Optionnal)</li> <li>Enter the list of the format contained in the library</li> </ol>"},{"location":"pages/how-to/group-assets-library/#add-the-library-to-the-environment","title":"Add the library to the environment","text":"<p>Then add the <code>AssetLibrary</code> to UMI3D Ressources objects that belongs to the library in the specified LibraryKey field that possess.</p>"},{"location":"pages/how-to/install-sdk/","title":"Install the UMI3D SDK","text":""},{"location":"pages/how-to/install-sdk/#get-unity","title":"Get Unity","text":"<p>Go on the Unity website and select a plan, then download a version compatible with the UMI3D release you want to use.</p>"},{"location":"pages/how-to/install-sdk/#import-the-sdk","title":"Import the SDK","text":""},{"location":"pages/how-to/install-sdk/#1-get-a-umi3d-sdk-release","title":"1. Get a UMI3D SDK release","text":"<p>Go on the GitHub releases and find the release you want to use.</p>"},{"location":"pages/how-to/install-sdk/#2-download-the-packages","title":"2. Download the packages","text":"<p>Under \"Assets\", download the packages files you want to use. Note that the source code zips are not required to use UMI3D as thay are already integrated in the packages.</p> <p></p>"},{"location":"pages/how-to/install-sdk/#3-import-the-packages","title":"3. Import the packages","text":"<p>For each of the following package, drag and drop the file in the Unity project window.</p> <ul> <li>core.unitypackage</li> <li>dependencies.unitypackage</li> <li>If you want to create a UMI3D environment: edk.unitypackage; or if you want to create a UMI3D browser: cdk.unitypackage</li> <li>The complementary modules you want: interaction-system.unitypackage, user-capture.unitypackage, collaboration.unitypackage</li> </ul> <p></p> <p>And import everything.</p> <p></p> <p>If you want basic scripts to launch a server, also import the server-starter-kit.unitypackage file.</p>"},{"location":"pages/how-to/move-an-asset-at-runtime/","title":"Change an asset properties at runtime","text":"<p>Here is a short guide on how to change an asset properties. For example, we will move a 3D asset with a smooth movement using interpolation.</p>"},{"location":"pages/how-to/move-an-asset-at-runtime/#send-the-proper-umi3d-operation","title":"Send the proper UMI3D operation","text":""},{"location":"pages/how-to/move-an-asset-at-runtime/#1-create-the-script-referencing-the-object","title":"1. Create the script referencing the object","text":"<p>Add a script referencing the object to move</p> <p></p> <pre><code>using umi3d.edk;\nusing UnityEngine;\n\npublic class MoveBallon : MonoBehaviour\n{\nUMI3DNode balloonModel;\n\npublic void Start()\n{\nballoonModel = GetComponent&lt;UMI3DNode&gt;();\n}\n}\n</code></pre>"},{"location":"pages/how-to/move-an-asset-at-runtime/#2-define-the-operation","title":"2. Define the Operation","text":"<p>Create a <code>SetValue</code> operation to move the object.</p> <pre><code>Vector3 newPosition = balloonModel.objectPosition.GetValue() + new Vector3(1, 0, 0);\nSetEntityProperty operation = balloonModel.objectPosition.SetValue(newPosition);\n</code></pre>"},{"location":"pages/how-to/move-an-asset-at-runtime/#3-create-the-transaction","title":"3. Create the Transaction","text":"<p>Create a <code>Transaction</code>.</p> <pre><code>Transaction t = new Transaction()\n{\nreliable = true\n};\n\nt.AddIfNotNull(operation);\n</code></pre>"},{"location":"pages/how-to/move-an-asset-at-runtime/#4-dispatch-the-transaction","title":"4. Dispatch the transaction","text":"<p>Dispatch the transaction.</p> <pre><code>t.Dispatch();\n</code></pre>"},{"location":"pages/how-to/move-an-asset-at-runtime/#activate-interpolation-on-the-property","title":"Activate interpolation on the property","text":"<pre><code>StartInterpolationProperty operation = new StartInterpolationProperty()\n{\nusers = new HashSet&lt;UMI3DUser&gt;(UMI3DCollaborationServer.Collaboration.Users), //send the interpolation to all referenced users\nproperty = balloonModel.objectPosition.propertyId, // id of the property to activate interpolation on\nentityId = balloonModel.objectPosition.entityId,\nstartValue = balloonModel.objectPosition.GetValue()\n};\n\nTransaction t = new Transaction()\n{\nreliable = true\n};\n\nt.Add(operation);\n\nt.Dispatch();\n</code></pre>"},{"location":"pages/tutorials/","title":"Getting Started","text":"<p>This sections contains a number of tutorials to helps you start right away with UMI3D.</p> <p>First steps with the UMI3D EDK</p>"},{"location":"pages/tutorials/first-steps-umi3d-edk/","title":"First steps with the UMI3D Environment Development Kit","text":"<p>This tutorial aims to help Unity developers to start creating Collaborative Virtual Environments with the UMI3D SDK. The created Collaborative Virtual Environment is a basic world only containing avatars for the users and one interaction. For a more advanced sample, have a look on the UMI3D Samples project.</p> <p>Important</p> <p>This tutorial is old and need to be updated.</p> <p>Requirements</p> <ul> <li>UMI3D Version: 1.1.r.210402+</li> <li>Compatible UMI3D Desktop Browser: 1.0.5.210402+</li> <li>Compatible UMI3D OpenVR Browser: 1.0.5.210402+</li> </ul>"},{"location":"pages/tutorials/first-steps-umi3d-edk/#set-up-the-server","title":"Set up the server","text":""},{"location":"pages/tutorials/first-steps-umi3d-edk/#add-a-server","title":"Add a server","text":"<p>Create an empty <code>GameObject</code> and eventually rename it \u201cUMI3DServer\u201d</p> <p></p> <p>Add a <code>UMI3DMainThreadDispatcher</code> component to the GameObject</p> <p></p> <p>Add a <code>UMI3DCollaborationServer</code> component to the GameObject</p> <p></p>"},{"location":"pages/tutorials/first-steps-umi3d-edk/#configure-the-server","title":"Configure the server","text":"<p>Fill the HttpPort field (e.g. 50203) of the <code>UMI3DCollaborationServer</code> component</p> <p></p>"},{"location":"pages/tutorials/first-steps-umi3d-edk/#configure-identification","title":"Configure identification","text":"<p>Create an Identifier script and paste the code below inside.</p> <pre><code>```cs\nusing System.Collections;\nusing System.Collections.Generic;\nusing umi3d.common;\nusing umi3d.common.collaboration;\nusing umi3d.edk.collaboration;\nusing UnityEngine;\n\n[CreateAssetMenu(fileName = \"identifier\", menuName = \"UMI3D/Identifier\")]\npublic class identifier : IdentifierApi\n{\n    public string pin = \"0000\";\n\n    ///&lt;inheritdoc/&gt;\n    public override UMI3DAuthenticator GetAuthenticator(ref AuthenticationType type)\n    {\n        if (type != AuthenticationType.Pin) Debug.LogWarning($\"PinIdentifierApi does not handle other AuthenticationType than PIN [ignored type : {type}]\");\n        //type = AuthenticationType.Pin;\n        return new UMI3DAuthenticator(pin);\n    }\n}\n```\n</code></pre> <p>Create an <code>Identifier</code> asset in the Script folder</p> <p></p> <p>Assign the created Identifier to the Identifier field of the UMI3DCollaborationServer component</p> <p></p>"},{"location":"pages/tutorials/first-steps-umi3d-edk/#add-a-launcher","title":"Add a launcher","text":"<p>Create an empty <code>GameObject</code> and eventually rename it \u201cUMI3DLauncher\u201d</p> <p></p> <p>Add a <code>UMI3DLauncher</code> component to the GameObject</p> <p></p> <p>Tick the Launch Server On Start option</p> <p></p>"},{"location":"pages/tutorials/first-steps-umi3d-edk/#define-an-environment","title":"Define an environment","text":""},{"location":"pages/tutorials/first-steps-umi3d-edk/#create-an-environment","title":"Create an environment","text":"<p>Create an empty <code>GameObject</code> and eventually rename it \u201cUMI3DEnv\u201d.</p> <p></p> <p>Add a <code>UMI3DCollaborationEnvironment</code> component to the GameObject</p> <p></p> <p>Fill the Environment Name field as wanted (testGPR in the screenshot)</p> <p></p>"},{"location":"pages/tutorials/first-steps-umi3d-edk/#create-a-scene","title":"Create a scene","text":"<p>Create an empty <code>GameObject</code> under the UMI3DEnv <code>GameObject</code> and eventually rename it \u201cScene\u201d</p> <p></p> <p>Add a <code>UMI3DScene</code> component to this new <code>GameObject</code></p> <p></p> <p>Create an empty <code>GameObject</code> under the UMI3DEnv GameObject and eventually rename it \u201cSceneEmbo \u201d</p> <p></p> <p>Add a <code>UMI3DScene</code> component to this new <code>GameObject</code></p> <p></p>"},{"location":"pages/tutorials/first-steps-umi3d-edk/#set-up-avatars","title":"Set up avatars","text":""},{"location":"pages/tutorials/first-steps-umi3d-edk/#add-a-custom-avatar","title":"Add a custom avatar","text":"<p>Create a empty <code>GameObject</code> and eventually rename it \u201cPerso\u201d</p> <p></p> <p>Add a <code>UMI3DModel</code> component to the GameObject</p> <p></p> <p>Set the size of Variants to 1, select Unity_standalone and add the path where the AssetBundle is. In order to have a visual representation of the avatar on the environment, I added the \u201cLoadBundle\u201d component.</p> <p>Create a prefab of the whole asset in the Prefab folder and remove it from the scene.</p>"},{"location":"pages/tutorials/first-steps-umi3d-edk/#configure-user-body-tracking","title":"Configure user body tracking","text":"<p>Create an empty <code>GameObject</code> and eventually rename it \u201cUMI3DEmboManager\u201d</p> <p></p> <p>Add a <code>UMI3DEmbodimentManager</code> component to this new <code>GameObject</code></p> <p></p> <p>Assign the <code>UMI3DScene</code> of the <code>GameObject</code> \"SceneEmbo\u201c to the Embodiments Scene field of the <code>UMI3DEmbodimentManager</code> component</p> <p></p> <p>Create an AvatarManager script and paste the code below inside.</p> <pre><code>```cs\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing umi3d.edk;\nusing umi3d.common.userCapture;\nusing umi3d.edk.userCapture;\nusing System;\nusing umi3d.common;\n\npublic class AvatarManager : MonoBehaviour\n{\n    public GameObject modelPrefab;\n\n    //Attacher un objet aux \n    static public Dictionary&lt;String, GameObject&gt; avtBones = new Dictionary&lt;String, GameObject&gt;();\n    static public Dictionary&lt;String, UMI3DModel&gt; avtModele = new Dictionary&lt;String, UMI3DModel&gt;();\n    static public Dictionary&lt;UMI3DUserEmbodimentBone, UMI3DBinding&gt; avtBind = new Dictionary&lt;UMI3DUserEmbodimentBone, UMI3DBinding&gt;();\n    public List&lt;bindList&gt; listBindList = new List&lt;bindList&gt;();\n\n    // Start is called before the first frame update\n    void Start()\n    {\n        UMI3DEmbodimentManager.Instance.CreationEvent.AddListener(CreateBone);\n        UMI3DEmbodimentManager.Instance.UpdateEvent.AddListener(UpdateBone);\n        UMI3DEmbodimentManager.Instance.DeletionEvent.AddListener(DeleteBone);\n        UMI3DEmbodimentManager.Instance.NewEmbodiment.AddListener(InstanciateEmbodiment);\n    }\n\n    protected void InstanciateEmbodiment(UMI3DAvatarNode AvatarNode)\n    {\n        GameObject go = GameObject.Instantiate(modelPrefab, AvatarNode.transform);\n        go.transform.localPosition = new Vector3(0, -1.60f, 0);\n        LoadEntity le = go.GetComponent&lt;UMI3DModel&gt;().GetLoadEntity();\n        List&lt;Operation&gt; lop = new List&lt;Operation&gt;();\n        lop.Add(le);\n        avtModele.Add(AvatarNode.userId, go.GetComponent&lt;UMI3DModel&gt;());\n        UMI3DServer.Dispatch(new Transaction() { Operations = lop, reliable = true });\n    }\n\n    protected void DeleteBone(UMI3DUserEmbodimentBone UserEmbodimentBone)\n    {\n        GameObject go = avtBones[UserEmbodimentBone.boneType];\n        Destroy(go);\n        avtBones.Remove(UserEmbodimentBone.boneType);\n    }\n\n    protected void UpdateBone(UMI3DUserEmbodimentBone UserEmbodimentBone)\n    {\n        GameObject go = avtBones[UserEmbodimentBone.boneType];\n        go.transform.localPosition = UserEmbodimentBone.spatialPosition.localPosition;\n        go.transform.localRotation = UserEmbodimentBone.spatialPosition.localRotation;\n    }\n\n    protected void CreateBone(UMI3DUserEmbodimentBone UserEmbodimentBone)\n    {\n\n        String id = UserEmbodimentBone.userId;\n        UMI3DAvatarNode avnode = UMI3DEmbodimentManager.Instance.embodimentInstances[id];\n        GameObject go = new GameObject(\"Bone:\" + UserEmbodimentBone.boneType);\n        go.transform.parent = avnode.transform;\n        go.transform.localPosition = UserEmbodimentBone.spatialPosition.localPosition;\n        go.transform.localRotation = UserEmbodimentBone.spatialPosition.localRotation;\n        avtBones.Add(UserEmbodimentBone.boneType, go);\n        bindList bl = listBindList[0];\n        foreach (bind b in bl.bList)\n        {\n            UMI3DBinding binding = new UMI3DBinding()\n            {\n                boneType = b.boneType,\n                rigName = b.rigName,\n                offsetRotation = Quaternion.Euler(b.rotationOffset),\n                offsetPosition = b.positionOffset,\n                node = avtModele[id]\n            };\n\n        }\n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n\n    }\n\n    [System.Serializable]\n    public class bind\n    {\n        [ConstStringEnum(typeof(BoneType))]\n        public String boneType;\n        public String rigName;\n        public Vector3 positionOffset;\n        public Vector3 rotationOffset;\n\n    }\n    [System.Serializable]\n    public class bindList\n    {\n        public List&lt;bind&gt; bList = new List&lt;bind&gt;();\n    }\n}\n```\n</code></pre> <p>Add a <code>AvatarManager</code> component (with the created script) to the \u201cUMI3DEmboManager\u201d <code>GameObject</code></p> <p></p> <p>Add the \u00ab X \u00bb prefab in the modelPrefab field of the AvatarManager component</p> <p></p> <p>Set the size of List Bind List to 1, the size of B List to 1, choose \u201chead\u201d as a BoneType and set the name of the corresponding Bone in the model's structure (\u201cHead\u201d in our case)</p> <p></p>"},{"location":"pages/tutorials/first-steps-umi3d-edk/#support-audio","title":"Support audio","text":"<p>Create an empty <code>GameObject</code> and eventually name it \u201cUMI3DAudio\u201d</p> <p></p> <p>Add a <code>UMI3DAudioBridger</code> component to the <code>GameObject</code></p> <p></p>"},{"location":"pages/tutorials/first-steps-umi3d-edk/#populate-the-scene-with-a-3d-asset","title":"Populate the scene with a 3D asset","text":"<p>Create an empty <code>GameObject</code> and eventually name it \u201cobj1\u201d under the \u201cscene\u201d <code>GameObject</code></p> <p> </p> <p>Add a <code>UMI3DModel</code> component to this new <code>GameObject</code></p> <p></p> <p>Select the path of the object, its format and its extension in the corresponding fields</p> <p></p>"},{"location":"pages/tutorials/first-steps-umi3d-edk/#enrich-the-experience-with-interactions","title":"Enrich the experience with interactions","text":"<p>Add a <code>UMI3DEvent</code> component to the \u201cobj1\u201d GameObject</p> <p></p> <p>Add a <code>StringParameter</code> component to the \u201cobj1\u201d GameObject</p> <p></p> <p>Add a <code>UMI3DInteractable</code> component to the \u201cobj1\u201d GameObject</p> <p></p> <p>Add a <code>UMI3DManipulation</code> component to the \u201cobj1\u201d GameObject</p> <p></p>"}]}