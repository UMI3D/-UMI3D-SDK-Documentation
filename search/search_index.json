{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is UMI3D? UMI3D is a web protocol that enables the creation of 3D media in which users of any AR/VR device can collaborate in real time. The 3D media is created once and hosted on a server or on a local computer. Any XR device can display and interact with it remotely thanks to a dedicated UMI3D browser. Creating experiences with UMI3D helps to reduce the number of experiences that should be developed to treat the same use case with different devices. Moreover, it enables different devices to interact within a same experience without any further development. How does it work? UMI3D relies on an interaction-based device abstraction layer. It allows remote 3D media created with the UMI3D SDK to describe its possible interactions with a finite and limited set of objects. Each UMI3D browser supervises the loading/synchronization of 3D content, as well as the dynamic generation of an adapted to the device user interface, allowing its user to perform the described interactions. The main difference with existing cross-platform development standards such as WebVR or OpenXR is UMI3D's interaction-based device abstraction layer. These standards are limiting the designer to the usage of devices' common features. UMI3D enables to use all of the device's features to perform the interaction received.","title":"Home"},{"location":"#what-is-umi3d","text":"UMI3D is a web protocol that enables the creation of 3D media in which users of any AR/VR device can collaborate in real time. The 3D media is created once and hosted on a server or on a local computer. Any XR device can display and interact with it remotely thanks to a dedicated UMI3D browser. Creating experiences with UMI3D helps to reduce the number of experiences that should be developed to treat the same use case with different devices. Moreover, it enables different devices to interact within a same experience without any further development.","title":"What is UMI3D?"},{"location":"#how-does-it-work","text":"UMI3D relies on an interaction-based device abstraction layer. It allows remote 3D media created with the UMI3D SDK to describe its possible interactions with a finite and limited set of objects. Each UMI3D browser supervises the loading/synchronization of 3D content, as well as the dynamic generation of an adapted to the device user interface, allowing its user to perform the described interactions. The main difference with existing cross-platform development standards such as WebVR or OpenXR is UMI3D's interaction-based device abstraction layer. These standards are limiting the designer to the usage of devices' common features. UMI3D enables to use all of the device's features to perform the interaction received.","title":"How does it work?"},{"location":"pages/about/license/","text":"UMI3D SDK License Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS Copyright 2019-2022 Gfi Informatique Inetum Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. ## Attributions Some used on this website are open source icons created by Freepik or Smashicons from Flaticon.","title":"License"},{"location":"pages/about/license/#umi3d-sdk-license","text":"Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS Copyright 2019-2022 Gfi Informatique Inetum Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. ## Attributions Some used on this website are open source icons created by Freepik or Smashicons from Flaticon.","title":"UMI3D SDK License"},{"location":"pages/api-reference/home/","text":"API Reference Generated documentation Automatically generated documentation from code is available here . Modules UMI3D is composed of four modules: Core InteractionSystem UserCapture Collaboration More API descriptions to come soon. Packages The SDK is exported in three packages: Common: Contains all the UMI3D network standardization EDK: Contains all classes for UMI3D environment design and hosting on a server CDK: Contains all classes for UMI3D environments access through a browser To develop an environment you'll need Common+EDK, to develop a browser you need Common+CDK.","title":"API Reference"},{"location":"pages/api-reference/home/#api-reference","text":"","title":"API Reference"},{"location":"pages/api-reference/home/#generated-documentation","text":"Automatically generated documentation from code is available here .","title":"Generated documentation"},{"location":"pages/api-reference/home/#modules","text":"UMI3D is composed of four modules: Core InteractionSystem UserCapture Collaboration More API descriptions to come soon.","title":"Modules"},{"location":"pages/api-reference/home/#packages","text":"The SDK is exported in three packages: Common: Contains all the UMI3D network standardization EDK: Contains all classes for UMI3D environment design and hosting on a server CDK: Contains all classes for UMI3D environments access through a browser To develop an environment you'll need Common+EDK, to develop a browser you need Common+CDK.","title":"Packages"},{"location":"pages/explanation/home/","text":"Explanations To come","title":"Explanations"},{"location":"pages/explanation/home/#explanations","text":"To come","title":"Explanations"},{"location":"pages/how-to/add-a-3d-model/","text":"How-to: Add a 3D model Store your 3D asset Find the \"/data\" folder at the root of your project. You should create the folder if you do not have it. Choose whether your file should be publicly available or not by choosing the corresponding folder. You should create the folders if you do not have them. Add your 3D assets to any subfolder of your choice. Reference it in the scene Open your environment. Under your UMI3D Scene node, add an empty object. Add a UMI3D Model component to that node. Unwrap the variants parameters and set the size value to 1 to add a variant Set up the format to the one of the model to link, check the Is a local file checkbox, and browse in your file explorer towards the desired 3D model. Modify its position, orientation or size Add an import of the model through Unity to see your model in the editor. Modify the Transform component on the node that has the UMI3D Model component attached Troubleshooting Make sure the node with UMI3D Model component has all its parents up to the node with the UMI3D Scene component having UMI3D Node components.","title":"How-to: Add a 3D model"},{"location":"pages/how-to/add-a-3d-model/#how-to-add-a-3d-model","text":"","title":"How-to: Add a 3D model"},{"location":"pages/how-to/add-a-3d-model/#store-your-3d-asset","text":"Find the \"/data\" folder at the root of your project. You should create the folder if you do not have it. Choose whether your file should be publicly available or not by choosing the corresponding folder. You should create the folders if you do not have them. Add your 3D assets to any subfolder of your choice.","title":"Store your 3D asset"},{"location":"pages/how-to/add-a-3d-model/#reference-it-in-the-scene","text":"Open your environment. Under your UMI3D Scene node, add an empty object. Add a UMI3D Model component to that node. Unwrap the variants parameters and set the size value to 1 to add a variant Set up the format to the one of the model to link, check the Is a local file checkbox, and browse in your file explorer towards the desired 3D model.","title":"Reference it in the scene"},{"location":"pages/how-to/add-a-3d-model/#modify-its-position-orientation-or-size","text":"Add an import of the model through Unity to see your model in the editor. Modify the Transform component on the node that has the UMI3D Model component attached","title":"Modify its position, orientation or size"},{"location":"pages/how-to/add-a-3d-model/#troubleshooting","text":"Make sure the node with UMI3D Model component has all its parents up to the node with the UMI3D Scene component having UMI3D Node components.","title":"Troubleshooting"},{"location":"pages/how-to/change-color-asset/","text":"How-to : Override the color of an asset Create a MaterialSO Such as a Umi3D_External_Material or a Umi3D_PBR_Material . Create a script referencing the object and the material using umi3d.edk; using UnityEngine; public class ChangeBalloonColor : MonoBehaviour { UMI3DModel balloonModel; public MaterialSO newMaterial; public void Start() { balloonModel = GetComponent<UMI3DModel>(); } } Override the material Operation op; if (model.objectMaterialOverriders.GetValue().Count > 0) op = balloonModel.objectMaterialOverriders.SetValue(0, new MaterialOverrider() { overrideAllMaterial = true, newMaterial = newMaterial}); else op = balloonModel.objectMaterialOverriders.Add(new MaterialOverrider() { overrideAllMaterial = true, newMaterial = newMaterial}); Add operation and send transaction Transaction t = new transaction() { reliable = true }; t.AddIfNotNull(op); t.Dispatch();","title":"Change color asset"},{"location":"pages/how-to/change-color-asset/#how-to-override-the-color-of-an-asset","text":"","title":"How-to : Override the color of an asset"},{"location":"pages/how-to/change-color-asset/#create-a-materialso","text":"Such as a Umi3D_External_Material or a Umi3D_PBR_Material .","title":"Create a MaterialSO"},{"location":"pages/how-to/change-color-asset/#create-a-script-referencing-the-object-and-the-material","text":"using umi3d.edk; using UnityEngine; public class ChangeBalloonColor : MonoBehaviour { UMI3DModel balloonModel; public MaterialSO newMaterial; public void Start() { balloonModel = GetComponent<UMI3DModel>(); } }","title":"Create a script referencing the object and the material"},{"location":"pages/how-to/change-color-asset/#override-the-material","text":"Operation op; if (model.objectMaterialOverriders.GetValue().Count > 0) op = balloonModel.objectMaterialOverriders.SetValue(0, new MaterialOverrider() { overrideAllMaterial = true, newMaterial = newMaterial}); else op = balloonModel.objectMaterialOverriders.Add(new MaterialOverrider() { overrideAllMaterial = true, newMaterial = newMaterial});","title":"Override the material"},{"location":"pages/how-to/change-color-asset/#add-operation-and-send-transaction","text":"Transaction t = new transaction() { reliable = true }; t.AddIfNotNull(op); t.Dispatch();","title":"Add operation and send transaction"},{"location":"pages/how-to/create-asset-bundles/","text":"1 Prerequisite: Creating Unity AssetBundles 1.1 Creating an AssetBundle from a FBX file Create an \"AssetBundle\" folder, an \"Editor\" folder and a \"FBX\u201d folder Create a BuildAssetBundle script in the Editor folder and paste the code below inside using System.Collections; using System.Collections.Generic; using UnityEditor; using UnityEngine; public class BuildAssetBundle : Editor { [MenuItem(\"Assets/ Build AssetBundles\")] static void BuildAllAsseetBundles() { BuildPipeline.BuildAssetBundles(@\"D:\\Dev\\UMI3DTutorial\\UMI3DTutorial\\Assets\\Project\\Models\\AssetBundles\", BuildAssetBundleOptions.ChunkBasedCompression, BuildTarget.StandaloneWindows64); } } Replace the path in the code so that it references the path of your \u201cAssetBundle\u201d folder Copy your FBX file in the \u201cFBX\u201d folder Select your FBX file and at the bottom of the Inspector view, select \u201cNew\u201d in the AssetBundle drop down menu, and give the bundle a name (\u201cavatar\u201d here) With the FBX file selected, open the \u201cAssets\u201d menu and click on \u201cBuild AssetBundles\u201d When the build is over, the file will be available in your \u201cAssetBundle\u201d folder In order to load the AssetBundles, create a LoadBundle script and paste the code below inside using System.Collections; using System.Collections.Generic; using UnityEngine; public class LoadBundle : MonoBehaviour { AssetBundle myLoadAssetBundle; public string path; public string objName; void Start() { LoadAssetBundle(path); InstantiatedObjectFromBundle(objName); } void LoadAssetBundle(string bundleUrl) { myLoadAssetBundle = AssetBundle.LoadFromFile(bundleUrl); if (myLoadAssetBundle != null) { foreach (string n in myLoadAssetBundle.GetAllAssetNames()) { Debug.Log(\"nom=\" + n); } } Debug.Log(myLoadAssetBundle == null ? \"Failed to load AssetBundle \" : \"Load AssetBundle OK\"); } void InstantiatedObjectFromBundle(string assetName) { var prefab = myLoadAssetBundle.LoadAsset(assetName); Instantiate(prefab); } } This script loads the file form the path of the folder and the asset\u2019s name. To know the name of the bundle, a debug is visible on the console window, with all the available names","title":"Create asset bundles"},{"location":"pages/how-to/create-asset-bundles/#1-prerequisite-creating-unity-assetbundles","text":"","title":"1    Prerequisite: Creating Unity AssetBundles"},{"location":"pages/how-to/create-asset-bundles/#11-creating-an-assetbundle-from-a-fbx-file","text":"Create an \"AssetBundle\" folder, an \"Editor\" folder and a \"FBX\u201d folder Create a BuildAssetBundle script in the Editor folder and paste the code below inside using System.Collections; using System.Collections.Generic; using UnityEditor; using UnityEngine; public class BuildAssetBundle : Editor { [MenuItem(\"Assets/ Build AssetBundles\")] static void BuildAllAsseetBundles() { BuildPipeline.BuildAssetBundles(@\"D:\\Dev\\UMI3DTutorial\\UMI3DTutorial\\Assets\\Project\\Models\\AssetBundles\", BuildAssetBundleOptions.ChunkBasedCompression, BuildTarget.StandaloneWindows64); } } Replace the path in the code so that it references the path of your \u201cAssetBundle\u201d folder Copy your FBX file in the \u201cFBX\u201d folder Select your FBX file and at the bottom of the Inspector view, select \u201cNew\u201d in the AssetBundle drop down menu, and give the bundle a name (\u201cavatar\u201d here) With the FBX file selected, open the \u201cAssets\u201d menu and click on \u201cBuild AssetBundles\u201d When the build is over, the file will be available in your \u201cAssetBundle\u201d folder In order to load the AssetBundles, create a LoadBundle script and paste the code below inside using System.Collections; using System.Collections.Generic; using UnityEngine; public class LoadBundle : MonoBehaviour { AssetBundle myLoadAssetBundle; public string path; public string objName; void Start() { LoadAssetBundle(path); InstantiatedObjectFromBundle(objName); } void LoadAssetBundle(string bundleUrl) { myLoadAssetBundle = AssetBundle.LoadFromFile(bundleUrl); if (myLoadAssetBundle != null) { foreach (string n in myLoadAssetBundle.GetAllAssetNames()) { Debug.Log(\"nom=\" + n); } } Debug.Log(myLoadAssetBundle == null ? \"Failed to load AssetBundle \" : \"Load AssetBundle OK\"); } void InstantiatedObjectFromBundle(string assetName) { var prefab = myLoadAssetBundle.LoadAsset(assetName); Instantiate(prefab); } } This script loads the file form the path of the folder and the asset\u2019s name. To know the name of the bundle, a debug is visible on the console window, with all the available names","title":"1.1 Creating an AssetBundle from a FBX file"},{"location":"pages/how-to/group-assets-library/","text":"How-to: Group assets in an asset library Using assets libraries makes it possible to store the required asset for an environment on the client side. So, it does help a lot with speeding up the loading the same environment several times. Create a new asset library as a ScriptableObject. Configure the library Enter the library id. Usually \"com.compagny.libraryname\" Click on \"Now\" to update the data value. It is important to click here when you update your library since browsers always look for new version of libraries based on their date. Enter a number of variants. They are different sets of available ressources that could be ajusted to fit the device. For example, there is usually a default variant and an android variant. Enter the name of your variant. Usually default. Enter the path to your variant. Enter the number of files in your library (Optionnal) Enter the list of the format contained in the library Configure environment to use the library Then add the AssetLibrary to UMI3D Ressources objects that belongs to the library in the specified LibraryKey field that possess.","title":"How-to: Group assets in an asset library"},{"location":"pages/how-to/group-assets-library/#how-to-group-assets-in-an-asset-library","text":"Using assets libraries makes it possible to store the required asset for an environment on the client side. So, it does help a lot with speeding up the loading the same environment several times.","title":"How-to: Group assets in an asset library"},{"location":"pages/how-to/group-assets-library/#create-a-new-asset-library-as-a-scriptableobject","text":"","title":"Create a new asset library as a ScriptableObject."},{"location":"pages/how-to/group-assets-library/#configure-the-library","text":"Enter the library id. Usually \"com.compagny.libraryname\" Click on \"Now\" to update the data value. It is important to click here when you update your library since browsers always look for new version of libraries based on their date. Enter a number of variants. They are different sets of available ressources that could be ajusted to fit the device. For example, there is usually a default variant and an android variant. Enter the name of your variant. Usually default. Enter the path to your variant. Enter the number of files in your library (Optionnal) Enter the list of the format contained in the library","title":"Configure the library"},{"location":"pages/how-to/group-assets-library/#configure-environment-to-use-the-library","text":"Then add the AssetLibrary to UMI3D Ressources objects that belongs to the library in the specified LibraryKey field that possess.","title":"Configure environment to use the library"},{"location":"pages/how-to/home/","text":"How-to guides This sections contains a number of small guides that can be thought as recipes in order to quickly achieve a specific goal. Asset management: Add a 3D Model to a scene Change an asset property at runtime Override the material's color of an asset Group assets in an asset library More guides to come soon.","title":"How-to guides"},{"location":"pages/how-to/home/#how-to-guides","text":"This sections contains a number of small guides that can be thought as recipes in order to quickly achieve a specific goal. Asset management: Add a 3D Model to a scene Change an asset property at runtime Override the material's color of an asset Group assets in an asset library More guides to come soon.","title":"How-to guides"},{"location":"pages/how-to/install-sdk/","text":"Install the UMI3D SDK Get Unity Go on the Unity website and select a plan, then download a version compatible with the UMI3D release you want to use. Import the SDK 1 - Get a UMI3D SDK release Go on the GitHub releases and find the release you want to use. 2 - Download the packages Under \"Assets\", download the packages files you want to use. Note that the source code zips are not required to use UMI3D as thay are already integrated in the packages. 3 - Import the packages For each of the following package, drag and drop the file in the Unity project window. core.unitypackage dependencies.unitypackage If you want to create a UMI3D environment: edk.unitypackage ; or if you want to create a UMI3D browser: cdk.unitypackage The complementary modules you want: interaction-system.unitypackage , user-capture.unitypackage , collaboration.unitypackage And import everything. If you want basic scripts to launch a server, also import the server-starter-kit.unitypackage file.","title":"Install sdk"},{"location":"pages/how-to/install-sdk/#install-the-umi3d-sdk","text":"","title":"Install the UMI3D SDK"},{"location":"pages/how-to/install-sdk/#get-unity","text":"Go on the Unity website and select a plan, then download a version compatible with the UMI3D release you want to use.","title":"Get Unity"},{"location":"pages/how-to/install-sdk/#import-the-sdk","text":"","title":"Import the SDK"},{"location":"pages/how-to/install-sdk/#1-get-a-umi3d-sdk-release","text":"Go on the GitHub releases and find the release you want to use.","title":"1 - Get a UMI3D SDK release"},{"location":"pages/how-to/install-sdk/#2-download-the-packages","text":"Under \"Assets\", download the packages files you want to use. Note that the source code zips are not required to use UMI3D as thay are already integrated in the packages.","title":"2 - Download the packages"},{"location":"pages/how-to/install-sdk/#3-import-the-packages","text":"For each of the following package, drag and drop the file in the Unity project window. core.unitypackage dependencies.unitypackage If you want to create a UMI3D environment: edk.unitypackage ; or if you want to create a UMI3D browser: cdk.unitypackage The complementary modules you want: interaction-system.unitypackage , user-capture.unitypackage , collaboration.unitypackage And import everything. If you want basic scripts to launch a server, also import the server-starter-kit.unitypackage file.","title":"3 - Import the packages"},{"location":"pages/how-to/move-an-asset-at-runtime/","text":"How-to: Change an asset properties Here is a short guide on how to change an asset properties. For example, we will move a 3D asset with a smooth movement using interpolation. Send the proper UMI3D operation Add a script referencing the object to move using umi3d.edk; using UnityEngine; public class MoveBallon : MonoBehaviour { UMI3DNode balloonModel; public void Start() { balloonModel = GetComponent<UMI3DNode>(); } } Create a SetValue operation Vector3 newPosition = balloonModel.objectPosition.GetValue() + new Vector3(1, 0, 0); SetEntityProperty operation = balloonModel.objectPosition.SetValue(newPosition); Create a Transaction Transaction t = new Transaction() { reliable = true }; t.AddIfNotNull(operation); Dispatch the transaction t.Dispatch(); Activate interpolation on the property StartInterpolationProperty operation = new StartInterpolationProperty() { users = new HashSet<UMI3DUser>(UMI3DCollaborationServer.Collaboration.Users), //send the interpolation to all referenced users property = balloonModel.objectPosition.propertyId, // id of the property to activate interpolation on entityId = balloonModel.objectPosition.entityId, startValue = balloonModel.objectPosition.GetValue() }; Transaction t = new Transaction() { reliable = true }; t.Add(operation); t.Dispatch();","title":"How-to: Change an asset properties"},{"location":"pages/how-to/move-an-asset-at-runtime/#how-to-change-an-asset-properties","text":"Here is a short guide on how to change an asset properties. For example, we will move a 3D asset with a smooth movement using interpolation.","title":"How-to: Change an asset properties"},{"location":"pages/how-to/move-an-asset-at-runtime/#send-the-proper-umi3d-operation","text":"Add a script referencing the object to move using umi3d.edk; using UnityEngine; public class MoveBallon : MonoBehaviour { UMI3DNode balloonModel; public void Start() { balloonModel = GetComponent<UMI3DNode>(); } } Create a SetValue operation Vector3 newPosition = balloonModel.objectPosition.GetValue() + new Vector3(1, 0, 0); SetEntityProperty operation = balloonModel.objectPosition.SetValue(newPosition); Create a Transaction Transaction t = new Transaction() { reliable = true }; t.AddIfNotNull(operation); Dispatch the transaction t.Dispatch();","title":"Send the proper UMI3D operation"},{"location":"pages/how-to/move-an-asset-at-runtime/#activate-interpolation-on-the-property","text":"StartInterpolationProperty operation = new StartInterpolationProperty() { users = new HashSet<UMI3DUser>(UMI3DCollaborationServer.Collaboration.Users), //send the interpolation to all referenced users property = balloonModel.objectPosition.propertyId, // id of the property to activate interpolation on entityId = balloonModel.objectPosition.entityId, startValue = balloonModel.objectPosition.GetValue() }; Transaction t = new Transaction() { reliable = true }; t.Add(operation); t.Dispatch();","title":"Activate interpolation on the property"},{"location":"pages/tutorials/first-steps-umi3d-edk/","text":"Tutorial: First steps with the UMI3D Environment Development Kit This tutorial aims to help Unity developers to start creating Collaborative Virtual Environments with the UMI3D SDK. The created Collaborative Virtual Environment is a basic world only containing avatars for the users and one interaction. For a more advanced sample, have a look on UMI3D Samples project: https://github.com/UMI3D/UMI3D-Samples !!! note Stop Requirements UMI3D Version: 1.1.r.210402+ Compatible UMI3D Desktop Browser: 1.0.5.210402+ Compatible UMI3D OpenVR Browser: 1.0.5.210402+ 1.1 Set up the server Create an empty GameObject and eventually rename it \u201cUMI3DServer\u201d Add a UMI3DMainThreadDispatcher component to the GameObject Add a UMI3DCollaborationServer component to the GameObject Fill the HttpPort field (e.g. 50203) of the UMI3DCollaborationServer component Create an Identifier script and paste the code below inside. using System.Collections; using System.Collections.Generic; using umi3d.common; using umi3d.common.collaboration; using umi3d.edk.collaboration; using UnityEngine; [CreateAssetMenu(fileName = \"identifier\", menuName = \"UMI3D/Identifier\")] public class identifier : IdentifierApi { public string pin = \"0000\"; ///<inheritdoc/> public override UMI3DAuthenticator GetAuthenticator(ref AuthenticationType type) { if (type != AuthenticationType.Pin) Debug.LogWarning($\"PinIdentifierApi does not handle other AuthenticationType than PIN [ignored type : {type}]\"); //type = AuthenticationType.Pin; return new UMI3DAuthenticator(pin); } } Create an Identifier asset in the Script folder Assign the created Identifier to the Identifier field of the UMI3DCollaborationServer component Create an empty GameObject and eventually rename it \u201cUMI3DLauncher\u201d Add a UMI3DLauncher component to the GameObject Tick the Launch Server On Start option 1.2 Define an environment Create an empty GameObject and eventually rename it \u201cUMI3DEnv\u201d. Add a UMI3DCollaborationEnvironment component to the GameObject Fill the Environment Name field as wanted (testGPR in the screenshot) Create an empty GameObject under the UMI3DEnv GameObject and eventually rename it \u201cScene\u201d Add a UMI3DScene component to this new GameObject Create an empty GameObject under the UMI3DEnv GameObject and eventually rename it \u201cSceneEmbo \u201d Add a UMI3DScene component to this new GameObject 1.4 Add a custom avatar Create a empty GameObject and eventually rename it \u201cPerso\u201d Add a UMI3DModel component to the GameObject Set the size of Variants to 1, select Unity_standalone and add the path where the AssetBundle is. In order to have a visual representation of the avatar on the environment, I added the \u201cLoadBundle\u201d component. Create a prefab of the whole asset in the Prefab folder and remove it from the scene. 1.5 Configure user body tracking Create an empty GameObject and eventually rename it \u201cUMI3DEmboManager\u201d Add a UMI3DEmbodimentManager component to this new GameObject Assign the UMI3DScene of the GameObject \"SceneEmbo\u201c to the Embodiments Scene field of the UMI3DEmbodimentManager component Create an AvatarManager script and paste the code below inside. using System.Collections; using System.Collections.Generic; using UnityEngine; using umi3d.edk; using umi3d.common.userCapture; using umi3d.edk.userCapture; using System; using umi3d.common; public class AvatarManager : MonoBehaviour { public GameObject modelPrefab; //Attacher un objet aux static public Dictionary<String, GameObject> avtBones = new Dictionary<String, GameObject>(); static public Dictionary<String, UMI3DModel> avtModele = new Dictionary<String, UMI3DModel>(); static public Dictionary<UMI3DUserEmbodimentBone, UMI3DBinding> avtBind = new Dictionary<UMI3DUserEmbodimentBone, UMI3DBinding>(); public List<bindList> listBindList = new List<bindList>(); // Start is called before the first frame update void Start() { UMI3DEmbodimentManager.Instance.CreationEvent.AddListener(CreateBone); UMI3DEmbodimentManager.Instance.UpdateEvent.AddListener(UpdateBone); UMI3DEmbodimentManager.Instance.DeletionEvent.AddListener(DeleteBone); UMI3DEmbodimentManager.Instance.NewEmbodiment.AddListener(InstanciateEmbodiment); } protected void InstanciateEmbodiment(UMI3DAvatarNode AvatarNode) { GameObject go = GameObject.Instantiate(modelPrefab, AvatarNode.transform); go.transform.localPosition = new Vector3(0, -1.60f, 0); LoadEntity le = go.GetComponent<UMI3DModel>().GetLoadEntity(); List<Operation> lop = new List<Operation>(); lop.Add(le); avtModele.Add(AvatarNode.userId, go.GetComponent<UMI3DModel>()); UMI3DServer.Dispatch(new Transaction() { Operations = lop, reliable = true }); } protected void DeleteBone(UMI3DUserEmbodimentBone UserEmbodimentBone) { GameObject go = avtBones[UserEmbodimentBone.boneType]; Destroy(go); avtBones.Remove(UserEmbodimentBone.boneType); } protected void UpdateBone(UMI3DUserEmbodimentBone UserEmbodimentBone) { GameObject go = avtBones[UserEmbodimentBone.boneType]; go.transform.localPosition = UserEmbodimentBone.spatialPosition.localPosition; go.transform.localRotation = UserEmbodimentBone.spatialPosition.localRotation; } protected void CreateBone(UMI3DUserEmbodimentBone UserEmbodimentBone) { String id = UserEmbodimentBone.userId; UMI3DAvatarNode avnode = UMI3DEmbodimentManager.Instance.embodimentInstances[id]; GameObject go = new GameObject(\"Bone:\" + UserEmbodimentBone.boneType); go.transform.parent = avnode.transform; go.transform.localPosition = UserEmbodimentBone.spatialPosition.localPosition; go.transform.localRotation = UserEmbodimentBone.spatialPosition.localRotation; avtBones.Add(UserEmbodimentBone.boneType, go); bindList bl = listBindList[0]; foreach (bind b in bl.bList) { UMI3DBinding binding = new UMI3DBinding() { boneType = b.boneType, rigName = b.rigName, offsetRotation = Quaternion.Euler(b.rotationOffset), offsetPosition = b.positionOffset, node = avtModele[id] }; } } // Update is called once per frame void Update() { } [System.Serializable] public class bind { [ConstStringEnum(typeof(BoneType))] public String boneType; public String rigName; public Vector3 positionOffset; public Vector3 rotationOffset; } [System.Serializable] public class bindList { public List<bind> bList = new List<bind>(); } } Add a AvatarManager component (with the created script) to the \u201cUMI3DEmboManager\u201d GameObject Add the \u00ab X \u00bb prefab in the modelPrefab field of the AvatarManager component Set the size of List Bind List to 1, the size of B List to 1, choose \u201chead\u201d as a BoneType and set the name of the corresponding Bone in the model's structure (\u201cHead\u201d in our case) 1.7 Support audio Create an empty GameObject and eventually name it \u201cUMI3DAudio\u201d Add a UMI3DAudioBridger component to the GameObject 1.8 Populate the scene with a 3D asset Create an empty GameObject and eventually name it \u201cobj1\u201d under the \u201cscene\u201d GameObject Add a UMI3DModel component to this new GameObject Select the path of the object, its format and its extension in the corresponding fields Add a UMI3DEvent component to the \u201cobj1\u201d GameObject Add a StringParameter component to the \u201cobj1\u201d GameObject Add a UMI3DInteractable component to the \u201cobj1\u201d GameObject Add a UMI3DManipulation component to the \u201cobj1\u201d GameObject","title":"Tutorial: First steps with the UMI3D Environment Development Kit"},{"location":"pages/tutorials/first-steps-umi3d-edk/#tutorial-first-steps-with-the-umi3d-environment-development-kit","text":"This tutorial aims to help Unity developers to start creating Collaborative Virtual Environments with the UMI3D SDK. The created Collaborative Virtual Environment is a basic world only containing avatars for the users and one interaction. For a more advanced sample, have a look on UMI3D Samples project: https://github.com/UMI3D/UMI3D-Samples !!! note Stop","title":"Tutorial: First steps with the UMI3D Environment Development Kit"},{"location":"pages/tutorials/first-steps-umi3d-edk/#requirements","text":"UMI3D Version: 1.1.r.210402+ Compatible UMI3D Desktop Browser: 1.0.5.210402+ Compatible UMI3D OpenVR Browser: 1.0.5.210402+","title":"Requirements"},{"location":"pages/tutorials/first-steps-umi3d-edk/#11-set-up-the-server","text":"Create an empty GameObject and eventually rename it \u201cUMI3DServer\u201d Add a UMI3DMainThreadDispatcher component to the GameObject Add a UMI3DCollaborationServer component to the GameObject Fill the HttpPort field (e.g. 50203) of the UMI3DCollaborationServer component Create an Identifier script and paste the code below inside. using System.Collections; using System.Collections.Generic; using umi3d.common; using umi3d.common.collaboration; using umi3d.edk.collaboration; using UnityEngine; [CreateAssetMenu(fileName = \"identifier\", menuName = \"UMI3D/Identifier\")] public class identifier : IdentifierApi { public string pin = \"0000\"; ///<inheritdoc/> public override UMI3DAuthenticator GetAuthenticator(ref AuthenticationType type) { if (type != AuthenticationType.Pin) Debug.LogWarning($\"PinIdentifierApi does not handle other AuthenticationType than PIN [ignored type : {type}]\"); //type = AuthenticationType.Pin; return new UMI3DAuthenticator(pin); } } Create an Identifier asset in the Script folder Assign the created Identifier to the Identifier field of the UMI3DCollaborationServer component Create an empty GameObject and eventually rename it \u201cUMI3DLauncher\u201d Add a UMI3DLauncher component to the GameObject Tick the Launch Server On Start option","title":"1.1  Set up the server"},{"location":"pages/tutorials/first-steps-umi3d-edk/#12-define-an-environment","text":"Create an empty GameObject and eventually rename it \u201cUMI3DEnv\u201d. Add a UMI3DCollaborationEnvironment component to the GameObject Fill the Environment Name field as wanted (testGPR in the screenshot) Create an empty GameObject under the UMI3DEnv GameObject and eventually rename it \u201cScene\u201d Add a UMI3DScene component to this new GameObject Create an empty GameObject under the UMI3DEnv GameObject and eventually rename it \u201cSceneEmbo \u201d Add a UMI3DScene component to this new GameObject","title":"1.2  Define an environment"},{"location":"pages/tutorials/first-steps-umi3d-edk/#14-add-a-custom-avatar","text":"Create a empty GameObject and eventually rename it \u201cPerso\u201d Add a UMI3DModel component to the GameObject Set the size of Variants to 1, select Unity_standalone and add the path where the AssetBundle is. In order to have a visual representation of the avatar on the environment, I added the \u201cLoadBundle\u201d component. Create a prefab of the whole asset in the Prefab folder and remove it from the scene.","title":"1.4 Add a custom avatar"},{"location":"pages/tutorials/first-steps-umi3d-edk/#15-configure-user-body-tracking","text":"Create an empty GameObject and eventually rename it \u201cUMI3DEmboManager\u201d Add a UMI3DEmbodimentManager component to this new GameObject Assign the UMI3DScene of the GameObject \"SceneEmbo\u201c to the Embodiments Scene field of the UMI3DEmbodimentManager component Create an AvatarManager script and paste the code below inside. using System.Collections; using System.Collections.Generic; using UnityEngine; using umi3d.edk; using umi3d.common.userCapture; using umi3d.edk.userCapture; using System; using umi3d.common; public class AvatarManager : MonoBehaviour { public GameObject modelPrefab; //Attacher un objet aux static public Dictionary<String, GameObject> avtBones = new Dictionary<String, GameObject>(); static public Dictionary<String, UMI3DModel> avtModele = new Dictionary<String, UMI3DModel>(); static public Dictionary<UMI3DUserEmbodimentBone, UMI3DBinding> avtBind = new Dictionary<UMI3DUserEmbodimentBone, UMI3DBinding>(); public List<bindList> listBindList = new List<bindList>(); // Start is called before the first frame update void Start() { UMI3DEmbodimentManager.Instance.CreationEvent.AddListener(CreateBone); UMI3DEmbodimentManager.Instance.UpdateEvent.AddListener(UpdateBone); UMI3DEmbodimentManager.Instance.DeletionEvent.AddListener(DeleteBone); UMI3DEmbodimentManager.Instance.NewEmbodiment.AddListener(InstanciateEmbodiment); } protected void InstanciateEmbodiment(UMI3DAvatarNode AvatarNode) { GameObject go = GameObject.Instantiate(modelPrefab, AvatarNode.transform); go.transform.localPosition = new Vector3(0, -1.60f, 0); LoadEntity le = go.GetComponent<UMI3DModel>().GetLoadEntity(); List<Operation> lop = new List<Operation>(); lop.Add(le); avtModele.Add(AvatarNode.userId, go.GetComponent<UMI3DModel>()); UMI3DServer.Dispatch(new Transaction() { Operations = lop, reliable = true }); } protected void DeleteBone(UMI3DUserEmbodimentBone UserEmbodimentBone) { GameObject go = avtBones[UserEmbodimentBone.boneType]; Destroy(go); avtBones.Remove(UserEmbodimentBone.boneType); } protected void UpdateBone(UMI3DUserEmbodimentBone UserEmbodimentBone) { GameObject go = avtBones[UserEmbodimentBone.boneType]; go.transform.localPosition = UserEmbodimentBone.spatialPosition.localPosition; go.transform.localRotation = UserEmbodimentBone.spatialPosition.localRotation; } protected void CreateBone(UMI3DUserEmbodimentBone UserEmbodimentBone) { String id = UserEmbodimentBone.userId; UMI3DAvatarNode avnode = UMI3DEmbodimentManager.Instance.embodimentInstances[id]; GameObject go = new GameObject(\"Bone:\" + UserEmbodimentBone.boneType); go.transform.parent = avnode.transform; go.transform.localPosition = UserEmbodimentBone.spatialPosition.localPosition; go.transform.localRotation = UserEmbodimentBone.spatialPosition.localRotation; avtBones.Add(UserEmbodimentBone.boneType, go); bindList bl = listBindList[0]; foreach (bind b in bl.bList) { UMI3DBinding binding = new UMI3DBinding() { boneType = b.boneType, rigName = b.rigName, offsetRotation = Quaternion.Euler(b.rotationOffset), offsetPosition = b.positionOffset, node = avtModele[id] }; } } // Update is called once per frame void Update() { } [System.Serializable] public class bind { [ConstStringEnum(typeof(BoneType))] public String boneType; public String rigName; public Vector3 positionOffset; public Vector3 rotationOffset; } [System.Serializable] public class bindList { public List<bind> bList = new List<bind>(); } } Add a AvatarManager component (with the created script) to the \u201cUMI3DEmboManager\u201d GameObject Add the \u00ab X \u00bb prefab in the modelPrefab field of the AvatarManager component Set the size of List Bind List to 1, the size of B List to 1, choose \u201chead\u201d as a BoneType and set the name of the corresponding Bone in the model's structure (\u201cHead\u201d in our case)","title":"1.5  Configure user body tracking"},{"location":"pages/tutorials/first-steps-umi3d-edk/#17-support-audio","text":"Create an empty GameObject and eventually name it \u201cUMI3DAudio\u201d Add a UMI3DAudioBridger component to the GameObject","title":"1.7  Support audio"},{"location":"pages/tutorials/first-steps-umi3d-edk/#18-populate-the-scene-with-a-3d-asset","text":"Create an empty GameObject and eventually name it \u201cobj1\u201d under the \u201cscene\u201d GameObject Add a UMI3DModel component to this new GameObject Select the path of the object, its format and its extension in the corresponding fields Add a UMI3DEvent component to the \u201cobj1\u201d GameObject Add a StringParameter component to the \u201cobj1\u201d GameObject Add a UMI3DInteractable component to the \u201cobj1\u201d GameObject Add a UMI3DManipulation component to the \u201cobj1\u201d GameObject","title":"1.8  Populate the scene with a 3D asset"},{"location":"pages/tutorials/home/","text":"Getting Started This sections contains a number of tutorials to helps you start right away with UMI3D. First steps with the UMI3D EDK","title":"Getting Started"},{"location":"pages/tutorials/home/#getting-started","text":"This sections contains a number of tutorials to helps you start right away with UMI3D. First steps with the UMI3D EDK","title":"Getting Started"}]}